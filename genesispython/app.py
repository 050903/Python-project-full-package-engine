import streamlit as st
import re
import json
import os
import zipfile
from io import BytesIO
import time
from datetime import datetime

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Project Genesis - Text to Website",
    page_icon="üåê",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .stApp {
        background-color: #f0f2f6;
    }
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1e3a8a;
        text-align: center;
        padding: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #4b5563;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stButton>button {
        background-color: #2563eb;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        border: none;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #1d4ed8;
    }
    .stExpander {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
    }
</style>
""", unsafe_allow_html=True)

class WebsiteGenerator:
    def __init__(self):
        # M·ªü r·ªông templates v√† color_map
        self.templates = {
            'c·ª≠a h√†ng': {'type': 'ecommerce', 'sections': ['header', 'hero', 'products', 'about', 'contact', 'footer'], 'primary_color': '#e91e63', 'secondary_color': '#ffffff'},
            'nh√† h√†ng': {'type': 'restaurant', 'sections': ['header', 'hero', 'menu', 'about', 'gallery', 'contact', 'footer'], 'primary_color': '#ff5722', 'secondary_color': '#ffffff'},
            'c√¥ng ty': {'type': 'corporate', 'sections': ['header', 'hero', 'services', 'about', 'team', 'contact', 'footer'], 'primary_color': '#2196f3', 'secondary_color': '#ffffff'},
            'c√° nh√¢n': {'type': 'portfolio', 'sections': ['header', 'hero', 'portfolio', 'skills', 'about', 'contact', 'footer'], 'primary_color': '#9c27b0', 'secondary_color': '#ffffff'},
            'blog': {'type': 'blog', 'sections': ['header', 'hero', 'posts', 'about', 'contact', 'footer'], 'primary_color': '#795548', 'secondary_color': '#ffffff'}
        }
        
        self.color_map = {
            'ƒë·ªè': '#e53e3e', 'xanh d∆∞∆°ng': '#3182ce', 'v√†ng': '#d69e2e',
            'h·ªìng': '#ed64a6', 't√≠m': '#805ad5', 'cam': '#dd6b20',
            'xanh l√°': '#38a169', 'xanh l·ª•c': '#38a169',
            'ƒëen': '#1a202c', 'tr·∫Øng': '#ffffff', 'x√°m': '#718096'
        }
    
    def analyze_input(self, user_input):
        lower_input = user_input.lower()
        
        site_name = "My Awesome Website"
        name_match = re.search(r't√™n l√†\s*["\']?([^"\']+)["\']?', user_input, re.IGNORECASE)
        if name_match:
            site_name = name_match.group(1).strip()
        
        website_type = 'corporate'
        template_info = self.templates['c√¥ng ty']
        for key, template in self.templates.items():
            if key in lower_input:
                website_type = template['type']
                template_info = template
                break
        
        primary_color = template_info['primary_color']
        for color_name, color_code in self.color_map.items():
            if color_name in lower_input:
                primary_color = color_code
                break
        
        features = {
            'has_products': any(word in lower_input for word in ['s·∫£n ph·∫©m', 'c·ª≠a h√†ng', 'shop']),
            'has_menu': any(word in lower_input for word in ['th·ª±c ƒë∆°n', 'menu', 'm√≥n ƒÉn']),
            'has_services': any(word in lower_input for word in ['d·ªãch v·ª•']),
            'has_portfolio': any(word in lower_input for word in ['portfolio', 'd·ª± √°n']),
            'has_blog': any(word in lower_input for word in ['blog', 'b√†i vi·∫øt', 'tin t·ª©c']),
            'has_gallery': any(word in lower_input for word in ['gallery', 'th∆∞ vi·ªán ·∫£nh', 'h√¨nh ·∫£nh']),
            'has_team': any(word in lower_input for word in ['ƒë·ªôi ng≈©', 'nh√¢n vi√™n', 'team']),
            'has_about': 'gi·ªõi thi·ªáu' in lower_input,
            'has_contact_form': 'li√™n h·ªá' in lower_input,
        }
        # ƒê·∫£m b·∫£o c√°c trang c∆° b·∫£n lu√¥n c√≥
        features['has_about'] = True
        features['has_contact_form'] = True
        
        description_match = re.search(r'm√¥ t·∫£\s*:\s*(.+)', user_input, re.IGNORECASE)
        description = description_match.group(1).strip() if description_match else f"Ch√†o m·ª´ng ƒë·∫øn v·ªõi website {website_type} c·ªßa ch√∫ng t√¥i."
        
        return {
            'site_name': site_name,
            'website_type': website_type,
            'primary_color': primary_color,
            'secondary_color': template_info['secondary_color'],
            'sections': template_info['sections'],
            'features': features,
            'description': description,
            'user_input': user_input
        }
    
    def generate_html(self, spec):
        return f"""<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{spec['site_name']}</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
        <nav class="navbar container">
            <a href="#" class="nav-brand">{spec['site_name']}</a>
            <ul class="nav-menu">
                <li><a href="#home">Trang ch·ªß</a></li>
                {self._generate_nav_items(spec['features'])}
            </ul>
            <div class="hamburger"><i class="fas fa-bars"></i></div>
        </nav>
    </header>

    <main>
        <section id="home" class="hero" style="background-image: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('https://via.placeholder.com/1920x1080/667eea/ffffff.png?text=Hero+Image');">
            <div class="hero-content">
                <h1 class="hero-title">{spec['site_name']}</h1>
                <p class="hero-description">{spec['description']}</p>
                <a href="#contact" class="btn btn-primary">Li√™n h·ªá ngay</a>
            </div>
        </section>

        {self._generate_content_sections(spec)}

    </main>

    <footer class="footer">
        <div class="container">
            <p>¬© {datetime.now().year} {spec['site_name']}. All Rights Reserved.</p>
            <div class="social-links">
                <a href="#"><i class="fab fa-facebook-f"></i></a>
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fab fa-instagram"></i></a>
            </div>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>"""

    def generate_css(self, spec):
        primary_color = spec['primary_color']
        return f""":root {{
    --primary-color: {primary_color};
    --secondary-color: #f4f4f4;
    --text-color: #333;
    --light-text-color: #fff;
    --header-height: 70px;
}}
* {{ margin: 0; padding: 0; box-sizing: border-box; }}
body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: var(--text-color); }}
.container {{ max-width: 1100px; margin: auto; overflow: hidden; padding: 0 20px; }}
section {{ padding: 60px 0; }}
.section-title {{ text-align: center; font-size: 2.5rem; margin-bottom: 40px; color: var(--primary-color); position: relative; }}
.section-title::after {{ content: ''; display: block; width: 60px; height: 3px; background: var(--primary-color); margin: 8px auto 0; }}
.header {{ background: #fff; color: var(--text-color); position: fixed; width: 100%; top: 0; z-index: 1000; box-shadow: 0 2px 5px rgba(0,0,0,0.1); height: var(--header-height); }}
.navbar {{ display: flex; justify-content: space-between; align-items: center; height: 100%; }}
.nav-brand {{ font-size: 1.5rem; font-weight: bold; color: var(--primary-color); text-decoration: none; }}
.nav-menu {{ display: flex; list-style: none; }}
.nav-menu li a {{ color: var(--text-color); padding: 1rem; text-decoration: none; transition: color 0.3s; }}
.nav-menu li a:hover {{ color: var(--primary-color); }}
.hero {{ height: 100vh; background-size: cover; background-position: center; display: flex; justify-content: center; align-items: center; text-align: center; color: var(--light-text-color); }}
.hero-content {{ max-width: 800px; }}
.hero-title {{ font-size: 4rem; margin-bottom: 20px; }}
.hero-description {{ font-size: 1.5rem; margin-bottom: 30px; }}
.btn {{ display: inline-block; padding: 12px 25px; border-radius: 5px; text-decoration: none; transition: background-color 0.3s; }}
.btn-primary {{ background: var(--primary-color); color: var(--light-text-color); }}
.btn-primary:hover {{ background: #e91e63dd; }}
.grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; }}
.card {{ background: #fff; padding: 2rem; border-radius: 8px; box-shadow: 0 5px 15px rgba(0,0,0,0.08); text-align: center; }}
.card i {{ font-size: 3rem; color: var(--primary-color); margin-bottom: 1rem; }}
.card h3 {{ margin-bottom: 1rem; }}
.contact-form {{ max-width: 700px; margin: auto; }}
.form-group {{ margin-bottom: 1.5rem; }}
.form-group input, .form-group textarea {{ width: 100%; padding: 12px; border-radius: 5px; border: 1px solid #ddd; }}
.footer {{ background: #333; color: #fff; text-align: center; padding: 2rem 0; }}
.social-links a {{ color: #fff; margin: 0 10px; font-size: 1.2rem; }}
.hamburger {{ display: none; cursor: pointer; font-size: 1.5rem; }}
@media (max-width: 768px) {{
    .hamburger {{ display: block; }}
    .nav-menu {{ display: none; position: absolute; top: var(--header-height); left: 0; background: #fff; width: 100%; flex-direction: column; text-align: center; }}
    .nav-menu.active {{ display: flex; }}
    .nav-menu li {{ width: 100%; }}
    .nav-menu li a {{ display: block; padding: 1rem; border-bottom: 1px solid #f4f4f4; }}
    .hero-title {{ font-size: 2.5rem; }}
    .hero-description {{ font-size: 1.2rem; }}
}}
"""

    def generate_js(self, spec):
        return """
document.addEventListener('DOMContentLoaded', function() {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');

    hamburger.addEventListener('click', () => {
        navMenu.classList.toggle('active');
    });

    document.querySelectorAll('.nav-menu a').forEach(link => {
        link.addEventListener('click', () => {
            if (navMenu.classList.contains('active')) {
                navMenu.classList.remove('active');
            }
        });
    });

    // Smooth scroll
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                targetElement.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
});
"""

    # --- H√ÄM HELPER CHO C√ÅC SECTION ---
    def _generate_nav_items(self, features):
        nav_items = []
        if features.get('has_about'): nav_items.append('<li><a href="#about">Gi·ªõi thi·ªáu</a></li>')
        if features.get('has_products'): nav_items.append('<li><a href="#products">S·∫£n ph·∫©m</a></li>')
        if features.get('has_menu'): nav_items.append('<li><a href="#menu">Th·ª±c ƒë∆°n</a></li>')
        if features.get('has_services'): nav_items.append('<li><a href="#services">D·ªãch v·ª•</a></li>')
        if features.get('has_portfolio'): nav_items.append('<li><a href="#portfolio">D·ª± √°n</a></li>')
        if features.get('has_blog'): nav_items.append('<li><a href="#blog">Blog</a></li>')
        if features.get('has_gallery'): nav_items.append('<li><a href="#gallery">Th∆∞ vi·ªán</a></li>')
        if features.get('has_team'): nav_items.append('<li><a href="#team">ƒê·ªôi ng≈©</a></li>')
        if features.get('has_contact_form'): nav_items.append('<li><a href="#contact">Li√™n h·ªá</a></li>')
        return '\n'.join(nav_items)

    def _generate_content_sections(self, spec):
        sections = []
        features = spec['features']
        if features.get('has_about'): sections.append(self._generate_about_section())
        if features.get('has_products'): sections.append(self._generate_products_section())
        if features.get('has_menu'): sections.append(self._generate_menu_section())
        if features.get('has_services'): sections.append(self._generate_services_section())
        if features.get('has_portfolio'): sections.append(self._generate_portfolio_section())
        if features.get('has_blog'): sections.append(self._generate_blog_section())
        if features.get('has_gallery'): sections.append(self._generate_gallery_section())
        if features.get('has_team'): sections.append(self._generate_team_section())
        if features.get('has_contact_form'): sections.append(self._generate_contact_section())
        return '\n\n'.join(sections)

    def _generate_about_section(self):
        return """
        <section id="about" class="container">
            <h2 class="section-title">V·ªÅ Ch√∫ng T√¥i</h2>
            <p style="text-align: center; max-width: 800px; margin: auto;">Ch√∫ng t√¥i l√† m·ªôt ƒë·ªôi ng≈© ƒëam m√™, t·∫≠n t√¢m mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m v√† d·ªãch v·ª• ch·∫•t l∆∞·ª£ng nh·∫•t cho kh√°ch h√†ng. V·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám, ch√∫ng t√¥i t·ª± h√†o v·ªÅ s·ª± chuy√™n nghi·ªáp v√† s·ª± h√†i l√≤ng c·ªßa kh√°ch h√†ng.</p>
        </section>"""
    
    def _generate_products_section(self):
        return """
        <section id="products" style="background-color: #f9f9f9;">
            <div class="container">
                <h2 class="section-title">S·∫£n ph·∫©m n·ªïi b·∫≠t</h2>
                <div class="grid">
                    <div class="card">
                        <img src="https://via.placeholder.com/300x200/cccccc/333333?text=S·∫£n+Ph·∫©m+1" alt="S·∫£n ph·∫©m 1" style="width: 100%; border-radius: 5px; margin-bottom: 1rem;">
                        <h3>S·∫£n ph·∫©m 1</h3>
                        <p>M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ s·∫£n ph·∫©m n√†y.</p>
                        <p style="font-weight: bold; color: var(--primary-color); margin-top: 1rem;">$19.99</p>
                    </div>
                    <div class="card">
                        <img src="https://via.placeholder.com/300x200/cccccc/333333?text=S·∫£n+Ph·∫©m+2" alt="S·∫£n ph·∫©m 2" style="width: 100%; border-radius: 5px; margin-bottom: 1rem;">
                        <h3>S·∫£n ph·∫©m 2</h3>
                        <p>M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ s·∫£n ph·∫©m n√†y.</p>
                        <p style="font-weight: bold; color: var(--primary-color); margin-top: 1rem;">$29.99</p>
                    </div>
                    <div class="card">
                        <img src="https://via.placeholder.com/300x200/cccccc/333333?text=S·∫£n+Ph·∫©m+3" alt="S·∫£n ph·∫©m 3" style="width: 100%; border-radius: 5px; margin-bottom: 1rem;">
                        <h3>S·∫£n ph·∫©m 3</h3>
                        <p>M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ s·∫£n ph·∫©m n√†y.</p>
                        <p style="font-weight: bold; color: var(--primary-color); margin-top: 1rem;">$39.99</p>
                    </div>
                </div>
            </div>
        </section>"""
        
    def _generate_services_section(self):
        return """
        <section id="services" class="container">
            <h2 class="section-title">D·ªãch V·ª• C·ªßa Ch√∫ng T√¥i</h2>
            <div class="grid">
                <div class="card">
                    <i class="fas fa-cogs"></i>
                    <h3>D·ªãch v·ª• A</h3>
                    <p>M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª• A, mang l·∫°i l·ª£i √≠ch g√¨ cho kh√°ch h√†ng.</p>
                </div>
                <div class="card">
                    <i class="fas fa-chart-line"></i>
                    <h3>D·ªãch v·ª• B</h3>
                    <p>M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª• B, mang l·∫°i l·ª£i √≠ch g√¨ cho kh√°ch h√†ng.</p>
                </div>
                <div class="card">
                    <i class="fas fa-users"></i>
                    <h3>D·ªãch v·ª• C</h3>
                    <p>M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª• C, mang l·∫°i l·ª£i √≠ch g√¨ cho kh√°ch h√†ng.</p>
                </div>
            </div>
        </section>"""
        
    def _generate_portfolio_section(self):
        # T∆∞∆°ng t·ª± nh∆∞ products
        return self._generate_products_section().replace('products', 'portfolio').replace('S·∫£n ph·∫©m', 'D·ª± √°n').replace('$', '')
        
    def _generate_blog_section(self):
        return """
        <section id="blog" style="background-color: #f9f9f9;">
            <div class="container">
                <h2 class="section-title">Tin t·ª©c & B√†i vi·∫øt</h2>
                <div class="grid">
                    <div class="card">
                        <img src="https://via.placeholder.com/300x200/cccccc/333333?text=B√†i+Vi·∫øt+1" alt="B√†i vi·∫øt 1" style="width: 100%; border-radius: 5px; margin-bottom: 1rem;">
                        <h3>Ti√™u ƒë·ªÅ b√†i vi·∫øt 1</h3>
                        <p>M·ªôt ƒëo·∫°n tr√≠ch ng·∫Øn t·ª´ b√†i vi·∫øt n√†y ƒë·ªÉ thu h√∫t ng∆∞·ªùi ƒë·ªçc...</p>
                        <a href="#" style="margin-top: 1rem; display: inline-block;">ƒê·ªçc th√™m</a>
                    </div>
                    <div class="card">
                         <img src="https://via.placeholder.com/300x200/cccccc/333333?text=B√†i+Vi·∫øt+2" alt="B√†i vi·∫øt 2" style="width: 100%; border-radius: 5px; margin-bottom: 1rem;">
                        <h3>Ti√™u ƒë·ªÅ b√†i vi·∫øt 2</h3>
                        <p>M·ªôt ƒëo·∫°n tr√≠ch ng·∫Øn t·ª´ b√†i vi·∫øt n√†y ƒë·ªÉ thu h√∫t ng∆∞·ªùi ƒë·ªçc...</p>
                         <a href="#" style="margin-top: 1rem; display: inline-block;">ƒê·ªçc th√™m</a>
                    </div>
                    <div class="card">
                         <img src="https://via.placeholder.com/300x200/cccccc/333333?text=B√†i+Vi·∫øt+3" alt="B√†i vi·∫øt 3" style="width: 100%; border-radius: 5px; margin-bottom: 1rem;">
                        <h3>Ti√™u ƒë·ªÅ b√†i vi·∫øt 3</h3>
                        <p>M·ªôt ƒëo·∫°n tr√≠ch ng·∫Øn t·ª´ b√†i vi·∫øt n√†y ƒë·ªÉ thu h√∫t ng∆∞·ªùi ƒë·ªçc...</p>
                         <a href="#" style="margin-top: 1rem; display: inline-block;">ƒê·ªçc th√™m</a>
                    </div>
                </div>
            </div>
        </section>"""
        
    def _generate_contact_section(self):
        return """
        <section id="contact" class="container">
            <h2 class="section-title">Li√™n H·ªá</h2>
            <div class="contact-form">
                <form>
                    <div class="form-group">
                        <input type="text" name="name" placeholder="T√™n c·ªßa b·∫°n" required>
                    </div>
                    <div class="form-group">
                        <input type="email" name="email" placeholder="Email c·ªßa b·∫°n" required>
                    </div>
                    <div class="form-group">
                        <textarea name="message" placeholder="N·ªôi dung tin nh·∫Øn" rows="5" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;">G·ª≠i Tin Nh·∫Øn</button>
                </form>
            </div>
        </section>"""
        
    def _generate_menu_section(self):
        return self._generate_products_section().replace('products', 'menu').replace('S·∫£n ph·∫©m', 'M√≥n ƒÉn')

    def _generate_gallery_section(self):
        return self._generate_products_section().replace('products', 'gallery').replace('S·∫£n ph·∫©m', 'H√¨nh ·∫£nh').replace('$', '')
        
    def _generate_team_section(self):
        return """
        <section id="team" class="container">
            <h2 class="section-title">ƒê·ªôi Ng≈© C·ªßa Ch√∫ng T√¥i</h2>
            <div class="grid">
                <div class="card">
                    <img src="https://via.placeholder.com/150" alt="Th√†nh vi√™n 1" style="width: 150px; height: 150px; border-radius: 50%; object-fit: cover; margin-bottom: 1rem;">
                    <h3>John Doe</h3>
                    <p>CEO & Founder</p>
                </div>
                <div class="card">
                    <img src="https://via.placeholder.com/150" alt="Th√†nh vi√™n 2" style="width: 150px; height: 150px; border-radius: 50%; object-fit: cover; margin-bottom: 1rem;">
                    <h3>Jane Smith</h3>
                    <p>CTO</p>
                </div>
                <div class="card">
                    <img src="https://via.placeholder.com/150" alt="Th√†nh vi√™n 3" style="width: 150px; height: 150px; border-radius: 50%; object-fit: cover; margin-bottom: 1rem;">
                    <h3>Peter Jones</h3>
                    <p>Lead Designer</p>
                </div>
            </div>
        </section>"""


# --- GIAO DI·ªÜN STREAMLIT ---

st.markdown('<p class="main-header">Project Genesis</p>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">N·ªÅn t·∫£ng T·ª± ƒë·ªông "VƒÉn b·∫£n th√†nh Website" - Prototype</p>', unsafe_allow_html=True)

# V√≠ d·ª• m·∫´u
default_prompt = "T·∫°o m·ªôt trang web cho c·ª≠a h√†ng b√°nh ng·ªçt t√™n l√† 'Sweet Delights', m√†u ch·ªß ƒë·∫°o l√† h·ªìng. Trang web c·∫ßn c√≥ ph·∫ßn gi·ªõi thi·ªáu, tr∆∞ng b√†y c√°c s·∫£n ph·∫©m b√°nh, v√† m·ªôt form li√™n h·ªá. M√¥ t·∫£: chuy√™n c√°c lo·∫°i b√°nh th·ªß c√¥ng cho m·ªçi d·ªãp."

user_prompt = st.text_area("Nh·∫≠p m√¥ t·∫£ v·ªÅ trang web b·∫°n mu·ªën t·∫°o:", value=default_prompt, height=150)

if st.button("T·∫°o Website üöÄ"):
    if not user_prompt:
        st.warning("Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho trang web c·ªßa b·∫°n.")
    else:
        generator = WebsiteGenerator()
        
        with st.spinner("Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b·∫°n..."):
            time.sleep(1)
            spec = generator.analyze_input(user_prompt)
        
        st.info("‚úÖ **Ph√¢n t√≠ch ho√†n t·∫•t!** ƒêang ti·∫øn h√†nh t·∫°o m√£ ngu·ªìn...")
        
        with st.spinner("ƒêang t·∫°o m√£ HTML, CSS, v√† JavaScript..."):
            time.sleep(2)
            html_code = generator.generate_html(spec)
            css_code = generator.generate_css(spec)
            js_code = generator.generate_js(spec)
            
            # T·∫°o file zip trong b·ªô nh·ªõ
            zip_buffer = BytesIO()
            with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
                zip_file.writestr("index.html", html_code)
                zip_file.writestr("styles.css", css_code)
                zip_file.writestr("script.js", js_code)
        
        st.success("üéâ **Tuy·ªát v·ªùi! Website c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**")
        
        # Hi·ªÉn th·ªã v√† t·∫£i xu·ªëng
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader("Xem tr∆∞·ªõc v√† T·∫£i v·ªÅ")
            st.markdown("B·∫°n c√≥ th·ªÉ xem m√£ ngu·ªìn b√™n d∆∞·ªõi ho·∫∑c t·∫£i to√†n b·ªô website d∆∞·ªõi d·∫°ng file ZIP.")
        with col2:
            st.download_button(
                label="üì• T·∫£i Website (.zip)",
                data=zip_buffer.getvalue(),
                file_name=f"{spec['site_name'].lower().replace(' ', '_')}_website.zip",
                mime="application/zip",
            )
        
        st.subheader("M√£ ngu·ªìn ƒë√£ t·∫°o")
        with st.expander("üìÑ HTML (index.html)"):
            st.code(html_code, language="html")
        
        with st.expander("üé® CSS (styles.css)"):
            st.code(css_code, language="css")
        
        with st.expander("‚öôÔ∏è JavaScript (script.js)"):
            st.code(js_code, language="javascript")

st.sidebar.title("V·ªÅ Project Genesis")
st.sidebar.info(
    "ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng prototype d·ª±a tr√™n b·∫£n thi·∫øt k·∫ø ki·∫øn tr√∫c 'Project Genesis'. "
    "N√≥ m√¥ ph·ªèng qu√° tr√¨nh chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n m√¥ t·∫£ th√†nh m·ªôt trang web tƒ©nh ho√†n ch·ªânh. "
    "Trong phi√™n b·∫£n n√†y, logic ph√¢n t√≠ch v√† t·∫°o m√£ ƒë∆∞·ª£c th·ª±c hi·ªán b·∫±ng c√°c quy t·∫Øc l·∫≠p tr√¨nh thay v√¨ c√°c m√¥ h√¨nh AI ph·ª©c t·∫°p."
)
st.sidebar.markdown("---")
st.sidebar.header("Ki·∫øn tr√∫c m√¥ ph·ªèng")
st.sidebar.markdown("""
- **B∆∞·ªõc 1: Ph√¢n t√≠ch Y√™u c·∫ßu:** D√πng Regex ƒë·ªÉ tr√≠ch xu·∫•t th·ª±c th·ªÉ.
- **B∆∞·ªõc 2: T·∫°o Th√¥ng s·ªë:** T·∫°o m·ªôt dictionary Python l√†m 'th√¥ng s·ªë k·ªπ thu·∫≠t'.
- **B∆∞·ªõc 3: T·∫°o m√£ Ngu·ªìn:** D√πng template strings (f-strings) ƒë·ªÉ t·∫°o HTML/CSS/JS.
- **B∆∞·ªõc 4: ƒê√≥ng g√≥i:** N√©n c√°c file ƒë√£ t·∫°o th√†nh m·ªôt file ZIP ƒë·ªÉ t·∫£i v·ªÅ.
""")