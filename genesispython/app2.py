import streamlit as st
import re
import json
import os
import zipfile
from io import BytesIO
import time
from datetime import datetime

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Project Genesis - Text to Website",
    page_icon="üåê",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .feature-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .code-preview {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 5px;
        padding: 1rem;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        max-height: 400px;
        overflow-y: auto;
    }
</style>
""", unsafe_allow_html=True)

class WebsiteGenerator:
    def __init__(self):
        self.templates = { # Gi·ªØ nguy√™n template ƒë·ªÉ l√†m fallback ho·∫∑c base
            'c·ª≠a h√†ng': {
                'type': 'ecommerce',
                'sections': ['header', 'hero', 'products', 'about', 'contact', 'footer'],
                'primary_color': '#e91e63',
                'secondary_color': '#ffffff'
            },
            'nh√† h√†ng': {
                'type': 'restaurant', 
                'sections': ['header', 'hero', 'menu', 'about', 'contact', 'footer'],
                'primary_color': '#ff5722',
                'secondary_color': '#ffffff'
            },
            'c√¥ng ty': {
                'type': 'corporate',
                'sections': ['header', 'hero', 'services', 'about', 'team', 'contact', 'footer'],
                'primary_color': '#2196f3',
                'secondary_color': '#ffffff'
            },
            'c√° nh√¢n': {
                'type': 'portfolio',
                'sections': ['header', 'hero', 'portfolio', 'skills', 'contact', 'footer'],
                'primary_color': '#9c27b0',
                'secondary_color': '#ffffff'
            },
            'blog': {
                'type': 'blog',
                'sections': ['header', 'hero', 'posts', 'about', 'contact', 'footer'],
                'primary_color': '#795548',
                'secondary_color': '#ffffff'
            }
        }
        
        self.color_map = {
            'ƒë·ªè': '#e53e3e', 'xanh': '#3182ce', 'v√†ng': '#d69e2e',
            'h·ªìng': '#ed64a6', 't√≠m': '#805ad5', 'cam': '#dd6b20',
            'xanh l√°': '#38a169', 'xanh l·ª•c': '#38a169',
            'ƒëen': '#1a202c', 'tr·∫Øng': '#ffffff', 'x√°m': '#718096'
        }

        # ƒê·ªãnh nghƒ©a c√°c component c√≥ th·ªÉ nh·∫≠n di·ªán v√† c√°c t·ª´ kh√≥a li√™n quan
        # Trong t∆∞∆°ng lai, ƒë√¢y s·∫Ω l√† m·ªôt th∆∞ vi·ªán Component Blueprints ƒë·ªì s·ªô
        self.component_keywords = {
            'products': ['s·∫£n ph·∫©m', 'c·ª≠a h√†ng', 'shop', 'b√°n'],
            'menu': ['th·ª±c ƒë∆°n', 'm√≥n ƒÉn', 'menu', 'ƒë·ªì ƒÉn'],
            'services': ['d·ªãch v·ª•', 'ph·ª•c v·ª•', 'service'],
            'portfolio': ['portfolio', 'd·ª± √°n', 'work', 't√°c ph·∫©m'],
            'blog': ['blog', 'b√†i vi·∫øt', 'tin t·ª©c', 'news'],
            'gallery': ['gallery', 'h√¨nh ·∫£nh', '·∫£nh', 'th∆∞ vi·ªán'],
            'team': ['ƒë·ªôi ng≈©', 'team', 'th√†nh vi√™n'],
            'testimonials': ['√Ω ki·∫øn kh√°ch h√†ng', 'testimonials', 'ph·∫£n h·ªìi'],
            'faq': ['h·ªèi ƒë√°p', 'faq', 'c√¢u h·ªèi th∆∞·ªùng g·∫∑p'],
            'pricing': ['gi√°', 'b·∫£ng gi√°', 'pricing']
        }

        # C√°c component m·∫∑c ƒë·ªãnh cho h·∫ßu h·∫øt c√°c trang web
        self.default_components = ['header', 'hero', 'about', 'contact', 'footer']
    
    def analyze_input(self, user_input):
        """Ph√¢n t√≠ch ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng v√† tr√≠ch xu·∫•t th√¥ng tin, x√¢y d·ª±ng c·∫•u tr√∫c component."""
        lower_input = user_input.lower()
        
        # 1. Tr√≠ch xu·∫•t t√™n website
        site_name = "My Website"
        name_patterns = [
            r't√™n[\s]*(?:l√†|:)?[\s]*[\'"]?([^\'".,\n]+)[\'"]?',
            r'g·ªçi l√†[\s]*[\'"]?([^\'".,\n]+)[\'"]?',
            r'c√≥ t√™n[\s]*[\'"]?([^\'".,\n]+)[\'"]?'
        ]
        
        for pattern in name_patterns:
            match = re.search(pattern, user_input, re.IGNORECASE)
            if match:
                site_name = match.group(1).strip()
                break
        
        # 2. X√°c ƒë·ªãnh lo·∫°i website (d√πng ƒë·ªÉ g·ª£i √Ω c√°c section ban ƒë·∫ßu)
        website_type = 'corporate' # M·∫∑c ƒë·ªãnh
        template_info = self.templates['c√¥ng ty'] # M·∫∑c ƒë·ªãnh
        
        for key, template in self.templates.items():
            if key in lower_input:
                website_type = template['type']
                template_info = template
                break
        
        # 3. Tr√≠ch xu·∫•t m√†u s·∫Øc
        primary_color = template_info['primary_color'] # L·∫•y t·ª´ template ban ƒë·∫ßu
        for color_name, color_code in self.color_map.items():
            if color_name in lower_input:
                primary_color = color_code
                break
        
        # 4. Tr√≠ch xu·∫•t m√¥ t·∫£ chung
        description = f"Website {website_type} chuy√™n nghi·ªáp v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i."
        desc_patterns = [
            r'm√¥ t·∫£[\s]*:?[\s]*([^\n]+)',
            r'gi·ªõi thi·ªáu[\s]*:?[\s]*([^\n]+)',
            r'v·ªÅ[\s]+website[\s]*(?:l√†|:)?[\s]*([^\n]+)'
        ]
        
        for pattern in desc_patterns:
            match = re.search(pattern, user_input, re.IGNORECASE)
            if match:
                description = match.group(1).strip()
                break

        # 5. Ph√¢n t√≠ch v√† x√¢y d·ª±ng danh s√°ch components
        # ƒê√¢y l√† ph·∫ßn c·∫£i ti·∫øn ch√≠nh: c·ªë g·∫Øng nh·∫≠n di·ªán c√°c component c·ª• th·ªÉ
        
        # B·∫Øt ƒë·∫ßu v·ªõi c√°c component m·∫∑c ƒë·ªãnh
        detected_components = set(self.default_components) 
        
        # Th√™m c√°c component d·ª±a tr√™n t·ª´ kh√≥a trong input
        for component_name, keywords in self.component_keywords.items():
            for keyword in keywords:
                if keyword in lower_input:
                    detected_components.add(component_name)
                    break
        
        # S·∫Øp x·∫øp c√°c component theo m·ªôt th·ª© t·ª± h·ª£p l√Ω (t√πy ch·ªânh)
        # ƒê√¢y l√† m·ªôt heuristics ƒë∆°n gi·∫£n, trong t∆∞∆°ng lai c√≥ th·ªÉ d√πng LLM ƒë·ªÉ s·∫Øp x·∫øp
        ordered_components = []
        for comp in ['header', 'hero']: # Lu√¥n ·ªü ƒë·∫ßu
            if comp in detected_components:
                ordered_components.append(comp)
                detected_components.remove(comp)
        
        # Th√™m c√°c component "n·ªôi dung" ph·ªï bi·∫øn
        content_order = ['products', 'menu', 'services', 'portfolio', 'blog', 'gallery', 'testimonials', 'team', 'faq', 'pricing']
        for comp in content_order:
            if comp in detected_components:
                ordered_components.append(comp)
                detected_components.remove(comp)
        
        # C√°c component c√≤n l·∫°i (v√≠ d·ª•: about, contact, footer)
        for comp in ['about', 'contact', 'footer']: # Lu√¥n ·ªü cu·ªëi ho·∫∑c g·∫ßn cu·ªëi
            if comp in detected_components:
                ordered_components.append(comp)
                detected_components.remove(comp)
        
        # Cu·ªëi c√πng, th√™m b·∫•t k·ª≥ component n√†o c√≤n s√≥t l·∫°i (n·∫øu c√≥)
        ordered_components.extend(list(detected_components))

        # ƒê·∫∑c t·∫£ chi ti·∫øt h∆°n cho t·ª´ng component (cho ph√©p t√πy ch·ªânh s√¢u h∆°n)
        # Trong t∆∞∆°ng lai, ƒë√¢y s·∫Ω l√† k·∫øt qu·∫£ c·ªßa vi·ªác g·ªçi LLM v·ªõi JSON Schema
        component_specs = []
        for comp_type in ordered_components:
            if comp_type == 'header':
                component_specs.append({"type": "header", "props": {"siteName": site_name}})
            elif comp_type == 'hero':
                 # C·ªë g·∫Øng tr√≠ch xu·∫•t headline v√† tagline t·ª´ m√¥ t·∫£ n·∫øu c√≥
                hero_headline_match = re.search(r'(?:ti√™u ƒë·ªÅ ch√≠nh|headline)[\s]*(?:l√†|:)?[\s]*["\']?([^"\']+)["\']?', user_input, re.IGNORECASE)
                hero_headline = hero_headline_match.group(1).strip() if hero_headline_match else f"Ch√†o m·ª´ng ƒë·∫øn v·ªõi {site_name}"

                hero_tagline_match = re.search(r'(?:m√¥ t·∫£ hero|tagline)[\s]*(?:l√†|:)?[\s]*["\']?([^"\']+)["\']?', user_input, re.IGNORECASE)
                hero_tagline = hero_tagline_match.group(1).strip() if hero_tagline_match else description

                component_specs.append({"type": "hero", "props": {"headline": hero_headline, "tagline": hero_tagline}})
            elif comp_type == 'about':
                # C·ªë g·∫Øng tr√≠ch xu·∫•t n·ªôi dung about t·ª´ m√¥ t·∫£ n·∫øu c√≥
                about_content_match = re.search(r'(?:v·ªÅ ch√∫ng t√¥i|about)[\s]*(?:n·ªôi dung|:)?[\s]*([^\n]+)', user_input, re.IGNORECASE)
                about_content = about_content_match.group(1).strip() if about_content_match else "Ch√∫ng t√¥i l√† m·ªôt ƒë·ªôi ng≈© ƒëam m√™ t·∫°o ra c√°c gi·∫£i ph√°p web tuy·ªát v·ªùi."
                component_specs.append({"type": "about", "props": {"title": "V·ªÅ ch√∫ng t√¥i", "content": about_content}})
            elif comp_type == 'products':
                component_specs.append({"type": "products", "props": {"title": "S·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i", "items": [{"name": "S·∫£n ph·∫©m A", "desc": "M√¥ t·∫£ A", "image": "https://via.placeholder.com/300x200?text=SP+A"}, {"name": "S·∫£n ph·∫©m B", "desc": "M√¥ t·∫£ B", "image": "https://via.placeholder.com/300x200?text=SP+B"}]}})
            elif comp_type == 'menu':
                component_specs.append({"type": "menu", "props": {"title": "Th·ª±c ƒë∆°n c·ªßa ch√∫ng t√¥i", "items": [{"name": "M√≥n X", "desc": "M√¥ t·∫£ X", "image": "https://via.placeholder.com/300x200?text=M√≥n+X"}, {"name": "M√≥n Y", "desc": "M√¥ t·∫£ Y", "image": "https://via.placeholder.com/300x200?text=M√≥n+Y"}]}})
            elif comp_type == 'services':
                component_specs.append({"type": "services", "props": {"title": "D·ªãch v·ª• c·ªßa ch√∫ng t√¥i", "items": [{"name": "D·ªãch v·ª• 1", "desc": "M√¥ t·∫£ DV1"}, {"name": "D·ªãch v·ª• 2", "desc": "M√¥ t·∫£ DV2"}]}})
            elif comp_type == 'portfolio':
                component_specs.append({"type": "portfolio", "props": {"title": "D·ª± √°n n·ªïi b·∫≠t", "items": [{"name": "D·ª± √°n 1", "desc": "M√¥ t·∫£ DA1", "image": "https://via.placeholder.com/400x250?text=DA1"}, {"name": "D·ª± √°n 2", "desc": "M√¥ t·∫£ DA2", "image": "https://via.placeholder.com/400x250?text=DA2"}]}})
            elif comp_type == 'blog':
                component_specs.append({"type": "blog", "props": {"title": "B√†i vi·∫øt m·ªõi nh·∫•t", "posts": [{"title": "B√†i blog 1", "desc": "T√≥m t·∫Øt B1", "image": "https://via.placeholder.com/400x250?text=Blog+1"}, {"title": "B√†i blog 2", "desc": "T√≥m t·∫Øt B2", "image": "https://via.placeholder.com/400x250?text=Blog+2"}]}})
            elif comp_type == 'gallery':
                component_specs.append({"type": "gallery", "props": {"title": "Th∆∞ vi·ªán ·∫£nh", "images": ["https://via.placeholder.com/400x300?text=Img+1", "https://via.placeholder.com/400x300?text=Img+2"]}})
            elif comp_type == 'team':
                component_specs.append({"type": "team", "props": {"title": "ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i", "members": [{"name": "Th√†nh vi√™n 1", "role": "CEO", "image": "https://via.placeholder.com/150x150?text=TV1"}, {"name": "Th√†nh vi√™n 2", "role": "CTO", "image": "https://via.placeholder.com/150x150?text=TV2"}]}})
            elif comp_type == 'testimonials':
                component_specs.append({"type": "testimonials", "props": {"title": "Kh√°ch h√†ng n√≥i g√¨ v·ªÅ ch√∫ng t√¥i", "quotes": [{"text": "D·ªãch v·ª• tuy·ªát v·ªùi!", "author": "Kh√°ch h√†ng A"}, {"text": "Website r·∫•t chuy√™n nghi·ªáp!", "author": "Kh√°ch h√†ng B"}]}})
            elif comp_type == 'faq':
                component_specs.append({"type": "faq", "props": {"title": "C√¢u h·ªèi th∆∞·ªùng g·∫∑p", "items": [{"question": "C√¢u h·ªèi 1?", "answer": "Tr·∫£ l·ªùi 1."}, {"question": "C√¢u h·ªèi 2?", "answer": "Tr·∫£ l·ªùi 2."}]}})
            elif comp_type == 'pricing':
                component_specs.append({"type": "pricing", "props": {"title": "B·∫£ng gi√° d·ªãch v·ª•", "plans": [{"name": "C∆° b·∫£n", "price": "100$", "features": ["T√≠nh nƒÉng 1", "T√≠nh nƒÉng 2"]}, {"name": "N√¢ng cao", "price": "200$", "features": ["T√≠nh nƒÉng 1", "T√≠nh nƒÉng 2", "T√≠nh nƒÉng 3"]}]}})
            elif comp_type == 'contact':
                # Ki·ªÉm tra l·∫°i t√≠nh nƒÉng contact form c√≥ ƒë∆∞·ª£c y√™u c·∫ßu kh√¥ng
                has_contact_form = 'li√™n h·ªá' in lower_input or 'contact form' in lower_input or 'bi·ªÉu m·∫´u li√™n h·ªá' in lower_input
                component_specs.append({"type": "contact", "props": {"has_form": has_contact_form}})
            elif comp_type == 'footer':
                component_specs.append({"type": "footer", "props": {"siteName": site_name}})
        
        # ƒê√¢y l√† c·∫•u tr√∫c output m·ªõi
        return {
            'site_name': site_name,
            'website_type': website_type, # Gi·ªØ l·∫°i ƒë·ªÉ tham kh·∫£o ho·∫∑c g·ª£i √Ω ban ƒë·∫ßu
            'primary_color': primary_color,
            'secondary_color': template_info['secondary_color'], # L·∫•y t·ª´ template ban ƒë·∫ßu
            'description': description, # M√¥ t·∫£ chung
            'pages': [ # Hi·ªán t·∫°i ch·ªâ c√≥ m·ªôt trang ch√≠nh, nh∆∞ng c√≥ th·ªÉ m·ªü r·ªông
                {
                    'name': 'Trang ch·ªß',
                    'path': '/',
                    'components': component_specs
                }
            ],
            'user_input': user_input
        }
    
    def generate_html(self, spec):
        """T·∫°o m√£ HTML t·ª´ th√¥ng s·ªë k·ªπ thu·∫≠t (spec) m·ªõi."""
        # Hi·ªán t·∫°i, ch·ªâ l·∫•y components c·ªßa trang ƒë·∫ßu ti√™n
        main_page_components = spec['pages'][0]['components'] if spec['pages'] else []

        # C√°c item navigation s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª´ c√°c components c√≥ id
        nav_items_html = ""
        for comp in main_page_components:
            if comp['type'] in self.component_keywords.keys() or comp['type'] in ['about', 'contact']: # C√°c section c√≥ th·ªÉ nav t·ªõi
                nav_label = self._get_nav_label(comp['type'])
                if nav_label:
                    nav_items_html += f"                <li><a href=\"#{comp['type']}\">{nav_label}</a></li>\n"

        html_template = f"""<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{spec['site_name']}</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
        <nav class="navbar">
            <div class="nav-brand">
                <h1>{spec['site_name']}</h1>
            </div>
            <ul class="nav-menu">
                <li><a href="#home">Trang ch·ªß</a></li>
{nav_items_html.strip()}
            </ul>
            <div class="hamburger">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </nav>
    </header>

    {self._render_component(spec['primary_color'], {'type': 'hero', 'props': next((comp['props'] for comp in main_page_components if comp['type'] == 'hero'), {})})}

    {self._generate_content_sections_from_spec(spec)}

    <script src="script.js"></script>
</body>
</html>"""
        return html_template
    
    def generate_css(self, spec):
        """T·∫°o m√£ CSS t·ª´ th√¥ng s·ªë k·ªπ thu·∫≠t"""
        # ƒê·∫£m b·∫£o primary_color ƒë∆∞·ª£c ƒë∆∞a v√†o CSS m·ªôt c√°ch ch√≠nh x√°c
        css_template = f"""/* Reset v√† Base Styles */
* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

:root {{
    --primary-color: {spec['primary_color']};
    --secondary-color: {spec['secondary_color']};
}}

body {{
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
    overflow-x: hidden;
}}

.container {{
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}}

/* Header Styles */
.header {{
    background: var(--primary-color);
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    transition: all 0.3s ease;
    box-shadow: 0 2px 20px rgba(0,0,0,0.1);
}}

.navbar {{
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
}}

.nav-brand h1 {{
    color: white;
    font-size: 1.8rem;
    font-weight: bold;
}}

.nav-menu {{
    display: flex;
    list-style: none;
    gap: 2rem;
}}

.nav-menu a {{
    color: white;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
}}

.nav-menu a:hover {{
    color: #f0f0f0;
}}

.nav-menu a::after {{
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 0;
    height: 2px;
    background: white;
    transition: width 0.3s ease;
}}

.nav-menu a:hover::after {{
    width: 100%;
}}

/* Hero Section */
.hero {{
    background: linear-gradient(135deg, var(--primary-color)22, var(--primary-color)44);
    min-height: 100vh;
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
}}

.hero-content {{
    max-width: 600px;
    z-index: 2;
    padding: 2rem;
}}

.hero-title {{
    font-size: 3.5rem;
    font-weight: bold;
    color: var(--primary-color);
    margin-bottom: 1rem;
    line-height: 1.2;
}}

.hero-description {{
    font-size: 1.3rem;
    color: #666;
    margin-bottom: 2rem;
    line-height: 1.6;
}}

.hero-buttons {{
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}}

.btn {{
    display: inline-block;
    padding: 12px 30px;
    border-radius: 50px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    cursor: pointer;
    border: none;
}}

.btn-primary {{
    background: var(--primary-color);
    color: white;
}}

.btn-primary:hover {{
    background: var(--primary-color)dd;
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
}}

.btn-secondary {{
    background: transparent;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
}}

.btn-secondary:hover {{
    background: var(--primary-color);
    color: white;
}}

/* Floating Animation */
.floating-shapes {{
    position: absolute;
    top: 0;
    right: 0;
    width: 50%;
    height: 100%;
    z-index: 1;
}}

.shape {{
    position: absolute;
    border-radius: 50%;
    opacity: 0.1;
    animation: float 6s ease-in-out infinite;
}}

.shape-1 {{
    width: 200px;
    height: 200px;
    background: var(--primary-color);
    top: 20%;
    right: 20%;
    animation-delay: 0s;
}}

.shape-2 {{
    width: 150px;
    height: 150px;
    background: var(--primary-color);
    top: 60%;
    right: 40%;
    animation-delay: 2s;
}}

.shape-3 {{
    width: 100px;
    height: 100px;
    background: var(--primary-color);
    top: 40%;
    right: 10%;
    animation-delay: 4s;
}}

@keyframes float {{
    0%, 100% {{ transform: translateY(0px) rotate(0deg); }}
    50% {{ transform: translateY(-20px) rotate(180deg); }}
}}

/* Sections */
section {{
    padding: 80px 0;
}}

.section-title {{
    text-align: center;
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 3rem;
    position: relative;
}}

.section-title::after {{
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 3px;
    background: var(--primary-color);
}}

.grid {{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}}

.card {{
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}}

.card::before {{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--primary-color);
}}

.card:hover {{
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}}

.card h3 {{
    color: var(--primary-color);
    margin-bottom: 1rem;
    font-size: 1.3rem;
}}

.card p {{
    color: #666;
    line-height: 1.6;
}}

.card img {{
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin-bottom: 1rem;
}}

/* Contact Section */
.contact {{
    background: #f8f9fa;
}}

.contact-content {{
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    align-items: start;
}}

.contact-info {{
    display: flex;
    flex-direction: column;
    gap: 2rem;
}}

.contact-item {{
    display: flex;
    align-items: center;
    gap: 1rem;
}}

.contact-item i {{
    font-size: 1.5rem;
    color: var(--primary-color);
    min-width: 30px;
}}

.contact-form {{
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}}

.form-group {{
    margin-bottom: 1.5rem;
}}

.form-group label {{
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #333;
}}

.form-group input,
.form-group textarea {{
    width: 100%;
    padding: 12px;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}}

.form-group input:focus,
.form-group textarea:focus {{
    outline: none;
    border-color: var(--primary-color);
}}

/* Footer */
.footer {{
    background: #333;
    color: white;
    padding: 3rem 0 1rem;
}}

.footer-content {{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
}}

.footer-section h3,
.footer-section h4 {{
    margin-bottom: 1rem;
    color: var(--primary-color);
}}

.footer-section ul {{
    list-style: none;
}}

.footer-section ul li {{
    margin-bottom: 0.5rem;
}}

.footer-section ul li a {{
    color: #ccc;
    text-decoration: none;
    transition: color 0.3s ease;
}}

.footer-section ul li a:hover {{
    color: white;
}}

.social-links {{
    display: flex;
    gap: 1rem;
}}

.social-links a {{
    display: inline-block;
    width: 40px;
    height: 40px;
    background: var(--primary-color);
    color: white;
    text-align: center;
    line-height: 40px;
    border-radius: 50%;
    transition: transform 0.3s ease;
}}

.social-links a:hover {{
    transform: translateY(-2px);
}}

.footer-bottom {{
    text-align: center;
    padding-top: 2rem;
    border-top: 1px solid #555;
    color: #ccc;
}}

/* Responsive Design */
.hamburger {{
    display: none;
    flex-direction: column;
    cursor: pointer;
}}

.hamburger span {{
    width: 25px;
    height: 3px;
    background: white;
    margin: 3px 0;
    transition: 0.3s;
}}

@media (max-width: 768px) {{
    .hamburger {{
        display: flex;
    }}
    
    .nav-menu {{
        position: fixed;
        left: -100%;
        top: 70px;
        flex-direction: column;
        background-color: var(--primary-color);
        width: 100%;
        text-align: center;
        transition: 0.3s;
        padding: 2rem 0;
    }}
    
    .nav-menu.active {{
        left: 0;
    }}
    
    .hero-title {{
        font-size: 2.5rem;
    }}
    
    .hero-buttons {{
        justify-content: center;
    }}
    
    .contact-content {{
        grid-template-columns: 1fr;
    }}
    
    .grid {{
        grid-template-columns: 1fr;
    }}
}}

/* Animation Classes */
.fade-in {{
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s ease;
}}

.fade-in.active {{
    opacity: 1;
    transform: translateY(0);
}}

/* Scroll Animation */
@keyframes slideInUp {{
    from {{
        opacity: 0;
        transform: translateY(50px);
    }}
    to {{
        opacity: 1;
        transform: translateY(0);
    }}
}}

.animate-on-scroll {{
    opacity: 0;
    animation: slideInUp 0.8s ease forwards;
}}"""
        return css_template
    
    def generate_js(self, spec):
        """T·∫°o m√£ JavaScript t·ª´ th√¥ng s·ªë k·ªπ thu·∫≠t"""
        # S·ª≠ d·ª•ng bi·∫øn CSS `--primary-color` ƒë·ªÉ header background kh·ªõp v·ªõi ch·ªß ƒë·ªÅ
        js_template = """// Mobile Menu Toggle
const hamburger = document.querySelector('.hamburger');
const navMenu = document.querySelector('.nav-menu');

hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navMenu.classList.toggle('active');
});

// Close mobile menu when clicking on a link
document.querySelectorAll('.nav-menu a').forEach(n => n.addEventListener('click', () => {
    hamburger.classList.remove('active');
    navMenu.classList.remove('active');
}));

// Smooth Scrolling
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Header Background on Scroll
window.addEventListener('scroll', () => {
    const header = document.querySelector('.header');
    if (window.scrollY > 100) {
        // L·∫•y m√†u ch√≠nh t·ª´ bi·∫øn CSS
        const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim();
        header.style.background = `rgba(${parseInt(primaryColor.slice(1,3), 16)}, ${parseInt(primaryColor.slice(3,5), 16)}, ${parseInt(primaryColor.slice(5,7), 16)}, 0.95)`;
        header.style.backdropFilter = 'blur(10px)';
    } else {
        const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim();
        header.style.background = primaryColor;
        header.style.backdropFilter = 'none';
    }
});


// Scroll Animation
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('active');
        }
    });
}, observerOptions);

// Observe elements for animation
document.querySelectorAll('.card, .contact-item, .hero-content, .section-title').forEach(el => {
    el.classList.add('fade-in');
    observer.observe(el);
});

// Form Submission
const contactForm = document.querySelector('.contact-form form');
if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Get form data
        const formData = new FormData(this);
        const data = Object.fromEntries(formData);
        
        // Simple validation
        if (!data.name || !data.email || !data.message) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
            return;
        }
        
        // Simulate form submission
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = 'ƒêang g·ª≠i...';
        submitBtn.disabled = true;
        
        setTimeout(() => {
            alert('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.');
            this.reset();
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        }, 2000);
    });
}

// Typing Effect for Hero Title
function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.innerHTML = '';
    
    function typing() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(typing, speed);
        }
    }
    
    typing();
}

// Initialize typing effect when page loads
window.addEventListener('load', () => {
    const heroTitle = document.querySelector('.hero-title');
    if (heroTitle) {
        const originalText = heroTitle.textContent;
        typeWriter(heroTitle, originalText, 80);
    }
});

// Parallax Effect for Hero Section
window.addEventListener('scroll', () => {
    const scrolled = window.pageYOffset;
    const parallax = document.querySelector('.hero');
    const speed = scrolled * 0.2; // Adjust speed as needed
    
    if (parallax) {
        parallax.style.transform = `translateY(${speed}px)`;
    }
});


// Add loading animation
document.addEventListener('DOMContentLoaded', function() {
    // Remove loading class if exists
    document.body.classList.remove('loading');
    
    // Add entrance animations
    setTimeout(() => {
        document.querySelectorAll('.fade-in').forEach((el, index) => {
            setTimeout(() => {
                el.classList.add('active');
            }, index * 100);
        });
    }, 300);
});

// Dynamic year in footer
const currentYear = new Date().getFullYear();
const yearElement = document.querySelector('.footer-bottom p');
if (yearElement) {
    yearElement.innerHTML = yearElement.innerHTML.replace('2024', currentYear);
}"""
        return js_template
    
    def _get_nav_label(self, component_type):
        """Helper ƒë·ªÉ l·∫•y nh√£n ƒëi·ªÅu h∆∞·ªõng cho component type."""
        if component_type == 'products': return "S·∫£n ph·∫©m"
        if component_type == 'menu': return "Th·ª±c ƒë∆°n"
        if component_type == 'services': return "D·ªãch v·ª•"
        if component_type == 'portfolio': return "Portfolio"
        if component_type == 'blog': return "Blog"
        if component_type == 'gallery': return "Th∆∞ vi·ªán"
        if component_type == 'team': return "ƒê·ªôi ng≈©"
        if component_type == 'testimonials': return "ƒê√°nh gi√°"
        if component_type == 'faq': return "H·ªèi ƒë√°p"
        if component_type == 'pricing': return "B·∫£ng gi√°"
        if component_type == 'about': return "Gi·ªõi thi·ªáu"
        if component_type == 'contact': return "Li√™n h·ªá"
        return None

    def _render_component(self, primary_color, component_spec):
        """Render HTML cho m·ªôt component c·ª• th·ªÉ d·ª±a tr√™n spec."""
        comp_type = component_spec['type']
        props = component_spec['props']
        
        html = ""

        if comp_type == 'header':
            # Header ƒë∆∞·ª£c render ri√™ng ·ªü ph·∫ßn generate_html
            pass 
        elif comp_type == 'hero':
            html = f"""
    <section id="home" class="hero">
        <div class="hero-content">
            <h1 class="hero-title">{props.get('headline', 'Ch√†o m·ª´ng!')}</h1>
            <p class="hero-description">{props.get('tagline', '')}</p>
            <div class="hero-buttons">
                <a href="#contact" class="btn btn-primary">Li√™n h·ªá ngay</a>
                <a href="#about" class="btn btn-secondary">T√¨m hi·ªÉu th√™m</a>
            </div>
        </div>
        <div class="hero-animation">
            <div class="floating-shapes">
                <div class="shape shape-1"></div>
                <div class="shape shape-2"></div>
                <div class="shape shape-3"></div>
            </div>
        </div>
    </section>
"""
        elif comp_type == 'about':
            html = f"""
    <section id="about" class="about">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'V·ªÅ ch√∫ng t√¥i')}</h2>
            <div class="grid">
                <div class="card fade-in">
                    <h3>S·ª© m·ªánh c·ªßa ch√∫ng t√¥i</h3>
                    <p>{props.get('content', 'Ch√∫ng t√¥i cam k·∫øt cung c·∫•p c√°c gi·∫£i ph√°p web ch·∫•t l∆∞·ª£ng cao, d·ªÖ s·ª≠ d·ª•ng v√† hi·ªáu qu·∫£, gi√∫p doanh nghi·ªáp v√† c√° nh√¢n ph√°t tri·ªÉn tr·ª±c tuy·∫øn.')}</p>
                </div>
                <div class="card fade-in">
                    <h3>T·∫ßm nh√¨n</h3>
                    <p>Tr·ªü th√†nh n·ªÅn t·∫£ng h√†ng ƒë·∫ßu trong vi·ªác chuy·ªÉn ƒë·ªïi √Ω t∆∞·ªüng th√†nh website m·ªôt c√°ch nhanh ch√≥ng v√† th√¥ng minh, lo·∫°i b·ªè r√†o c·∫£n k·ªπ thu·∫≠t.</p>
                </div>
                <div class="card fade-in">
                    <h3>Gi√° tr·ªã c·ªët l√µi</h3>
                    <p>S√°ng t·∫°o, T·∫≠n t√¢m, Hi·ªáu qu·∫£, H·ªó tr·ª£ kh√°ch h√†ng v∆∞·ª£t tr·ªôi. Ch√∫ng t√¥i lu√¥n l·∫Øng nghe v√† c·∫£i thi·ªán ƒë·ªÉ ƒë√°p ·ª©ng m·ªçi nhu c·∫ßu.</p>
                </div>
            </div>
        </div>
    </section>
"""
        elif comp_type == 'products':
            items_html = ""
            for item in props.get('items', []):
                items_html += f"""
                <div class="card fade-in">
                    <img src="{item.get('image', 'https://via.placeholder.com/300x200?text=S·∫£n+Ph·∫©m')}" alt="{item.get('name', 'S·∫£n ph·∫©m')}">
                    <h3>{item.get('name', 'S·∫£n ph·∫©m')}</h3>
                    <p>{item.get('desc', 'M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ s·∫£n ph·∫©m.')}</p>
                    <a href="#" class="btn btn-primary">Xem chi ti·∫øt</a>
                </div>
"""
            html = f"""
    <section id="products" class="products">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'S·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {items_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'menu':
            items_html = ""
            for item in props.get('items', []):
                items_html += f"""
                <div class="card fade-in">
                    <img src="{item.get('image', 'https://via.placeholder.com/300x200?text=M√≥n+ƒÇn')}" alt="{item.get('name', 'M√≥n ƒÉn')}">
                    <h3>{item.get('name', 'M√≥n ƒÉn')}</h3>
                    <p>{item.get('desc', 'M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m√≥n ƒÉn.')}</p>
                </div>
"""
            html = f"""
    <section id="menu" class="menu">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'Th·ª±c ƒë∆°n c·ªßa ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {items_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'services':
            items_html = ""
            for item in props.get('items', []):
                items_html += f"""
                <div class="card fade-in">
                    <i class="fas fa-desktop fa-3x"></i> <h3>{item.get('name', 'D·ªãch v·ª•')}</h3>
                    <p>{item.get('desc', 'M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ d·ªãch v·ª•.')}</p>
                </div>
"""
            html = f"""
    <section id="services" class="services">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'D·ªãch v·ª• c·ªßa ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {items_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'portfolio':
            items_html = ""
            for item in props.get('items', []):
                items_html += f"""
                <div class="card fade-in">
                    <img src="{item.get('image', 'https://via.placeholder.com/400x250?text=D·ª±+√°n')}" alt="{item.get('name', 'D·ª± √°n')}">
                    <h3>{item.get('name', 'D·ª± √°n')}</h3>
                    <p>{item.get('desc', 'M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ d·ª± √°n.')}</p>
                    <a href="#" class="btn btn-secondary">Xem d·ª± √°n</a>
                </div>
"""
            html = f"""
    <section id="portfolio" class="portfolio">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'D·ª± √°n n·ªïi b·∫≠t c·ªßa ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {items_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'blog':
            posts_html = ""
            for post in props.get('posts', []):
                posts_html += f"""
                <div class="card fade-in">
                    <img src="{post.get('image', 'https://via.placeholder.com/400x250?text=B√†i+vi·∫øt')}" alt="{post.get('title', 'B√†i vi·∫øt')}">
                    <h3>{post.get('title', 'Ti√™u ƒë·ªÅ b√†i vi·∫øt')}</h3>
                    <p>{post.get('desc', 'T√≥m t·∫Øt n·ªôi dung b√†i vi·∫øt.')}</p>
                    <a href="#" class="btn btn-secondary">ƒê·ªçc th√™m</a>
                </div>
"""
            html = f"""
    <section id="blog" class="blog">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'B√†i vi·∫øt m·ªõi nh·∫•t')}</h2>
            <div class="grid">
                {posts_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'gallery':
            images_html = ""
            for i, img_url in enumerate(props.get('images', [])):
                images_html += f"""
                <div class="gallery-item card fade-in">
                    <img src="{img_url}" alt="Gallery Image {i+1}">
                </div>
"""
            html = f"""
    <section id="gallery" class="gallery">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'Th∆∞ vi·ªán ·∫£nh c·ªßa ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {images_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'team':
            members_html = ""
            for member in props.get('members', []):
                members_html += f"""
                <div class="card fade-in">
                    <img src="{member.get('image', 'https://via.placeholder.com/150x150?text=Th√†nh+vi√™n')}" alt="{member.get('name', 'Th√†nh vi√™n')}" style="border-radius: 50%; margin-bottom: 1rem;">
                    <h3>{member.get('name', 'T√™n Th√†nh vi√™n')}</h3>
                    <p>{member.get('role', 'Vai tr√≤')}</p>
                    {f"<p>{member.get('bio', '')}</p>" if member.get('bio') else ""}
                </div>
"""
            html = f"""
    <section id="team" class="team">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {members_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'testimonials':
            quotes_html = ""
            for quote in props.get('quotes', []):
                quotes_html += f"""
                <div class="card fade-in">
                    <p class="quote">"{quote.get('text', '√ù ki·∫øn kh√°ch h√†ng.')}"</p>
                    <p class="author">- {quote.get('author', 'Kh√°ch h√†ng')}</p>
                </div>
"""
            html = f"""
    <section id="testimonials" class="testimonials">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'Kh√°ch h√†ng n√≥i g√¨ v·ªÅ ch√∫ng t√¥i')}</h2>
            <div class="grid">
                {quotes_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'faq':
            items_html = ""
            for item in props.get('items', []):
                items_html += f"""
                <div class="card fade-in">
                    <h3>{item.get('question', 'C√¢u h·ªèi th∆∞·ªùng g·∫∑p?')}</h3>
                    <p>{item.get('answer', 'ƒê√¢y l√† c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi ƒë√≥.')}</p>
                </div>
"""
            html = f"""
    <section id="faq" class="faq">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'C√¢u h·ªèi th∆∞·ªùng g·∫∑p')}</h2>
            <div class="grid">
                {items_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'pricing':
            plans_html = ""
            for plan in props.get('plans', []):
                features_html = "".join([f"<li>{f}</li>" for f in plan.get('features', [])])
                plans_html += f"""
                <div class="card fade-in">
                    <h3>{plan.get('name', 'G√≥i')}</h3>
                    <p class="price">{plan.get('price', '$0')}</p>
                    <ul>{features_html}</ul>
                    <a href="#" class="btn btn-primary">Ch·ªçn g√≥i</a>
                </div>
"""
            html = f"""
    <section id="pricing" class="pricing">
        <div class="container">
            <h2 class="section-title">{props.get('title', 'B·∫£ng gi√° d·ªãch v·ª•')}</h2>
            <div class="grid">
                {plans_html.strip()}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'contact':
            contact_form_html = self._generate_contact_form() if props.get('has_form', False) else ''
            html = f"""
    <section id="contact" class="contact">
        <div class="container">
            <h2 class="section-title">Li√™n h·ªá v·ªõi ch√∫ng t√¥i</h2>
            <div class="contact-content">
                <div class="contact-info">
                    <div class="contact-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <div>
                            <h4>ƒê·ªãa ch·ªâ</h4>
                            <p>123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM</p>
                        </div>
                    </div>
                    <div class="contact-item">
                        <i class="fas fa-phone"></i>
                        <div>
                            <h4>ƒêi·ªán tho·∫°i</h4>
                            <p>0123 456 789</p>
                        </div>
                    </div>
                    <div class="contact-item">
                        <i class="fas fa-envelope"></i>
                        <div>
                            <h4>Email</h4>
                            <p>info@{spec['site_name'].lower().replace(' ', '')}.com</p>
                        </div>
                    </div>
                </div>
                {contact_form_html}
            </div>
        </div>
    </section>
"""
        elif comp_type == 'footer':
            # Footer ƒë∆∞·ª£c render ri√™ng ·ªü cu·ªëi file html, kh√¥ng ph·∫£i l√† section
            pass
        
        return html

    def _generate_content_sections_from_spec(self, spec):
        """T·∫°o c√°c section n·ªôi dung t·ª´ spec.pages[0].components"""
        sections_html = []
        # B·ªè qua header, hero (ƒë√£ render ri√™ng) v√† footer (render cu·ªëi c√πng)
        for component_spec in spec['pages'][0]['components']:
            if component_spec['type'] not in ['header', 'hero', 'footer']:
                sections_html.append(self._render_component(spec['primary_color'], component_spec))
        
        # Th√™m footer c·ª©ng sau t·∫•t c·∫£ c√°c section n·ªôi dung
        sections_html.append(f"""
    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>{spec['site_name']}</h3>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>
                </div>
                <div class="footer-section">
                    <h4>Li√™n k·∫øt nhanh</h4>
                    <ul>
                        <li><a href="#home">Trang ch·ªß</a></li>
                        <li><a href="#about">Gi·ªõi thi·ªáu</a></li>
                        <li><a href="#contact">Li√™n h·ªá</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>Theo d√µi ch√∫ng t√¥i</h4>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-facebook"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                    </div>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2024 {spec['site_name']}. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            </div>
        </div>
    </footer>
""")
        return '\n'.join(sections_html)
    
    def _generate_contact_form(self):
        """T·∫°o m√£ HTML cho form li√™n h·ªá"""
        return """
                <div class="contact-form fade-in">
                    <h3 style="color: var(--primary-color); margin-bottom: 1.5rem;">G·ª≠i tin nh·∫Øn cho ch√∫ng t√¥i</h3>
                    <form>
                        <div class="form-group">
                            <label for="name">T√™n c·ªßa b·∫°n</label>
                            <input type="text" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email c·ªßa b·∫°n</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="message">Tin nh·∫Øn c·ªßa b·∫°n</label>
                            <textarea id="message" name="message" rows="5" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary" style="width: 100%;">G·ª≠i tin nh·∫Øn</button>
                    </form>
                </div>
        """

# --- Streamlit App ---
st.markdown("<h1 class='main-header'>üåê Project Genesis - Text to Website</h1>", unsafe_allow_html=True)

st.write("""
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **Project Genesis**! N·ªÅn t·∫£ng n√†y gi√∫p b·∫°n t·∫°o ra m·ªôt website chuy√™n nghi·ªáp ch·ªâ t·ª´ m√¥ t·∫£ vƒÉn b·∫£n. 
H√£y m√¥ t·∫£ trang web b·∫°n mu·ªën, v√† AI c·ªßa ch√∫ng t√¥i s·∫Ω t·∫°o ra m√£ ngu·ªìn HTML, CSS v√† JavaScript s·∫µn s√†ng ƒë·ªÉ tri·ªÉn khai.
""")

st.markdown("---")

# Input ng∆∞·ªùi d√πng
st.subheader("1. M√¥ t·∫£ trang web c·ªßa b·∫°n:")
user_input = st.text_area(
    "V√≠ d·ª•: 'T√¥i mu·ªën m·ªôt trang web c·ª≠a h√†ng b√°nh ng·ªçt c√≥ t√™n \"Sweet Delights\" v·ªõi m√†u s·∫Øc ch·ªß ƒë·∫°o l√† h·ªìng. Trang web c·∫ßn c√≥ c√°c trang s·∫£n ph·∫©m, gi·ªõi thi·ªáu v√† li√™n h·ªá. Th√™m ph·∫ßn FAQ v√† m·ªôt ƒëo·∫°n gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ ch√∫ng t√¥i.'",
    height=150,
    placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ trang web c·ªßa b·∫°n ·ªü ƒë√¢y..."
)

generator = WebsiteGenerator()

if st.button("T·∫°o Website"):
    if user_input:
        with st.spinner("ƒêang ph√¢n t√≠ch y√™u c·∫ßu v√† t·∫°o m√£ ngu·ªìn..."):
            time.sleep(2) # Simulate processing time
            spec = generator.analyze_input(user_input)
            
            html_code = generator.generate_html(spec)
            css_code = generator.generate_css(spec)
            js_code = generator.generate_js(spec)

        st.markdown("<div class='success-box'>üéâ Website c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!</div>", unsafe_allow_html=True)

        st.subheader("2. Xem l·∫°i th√¥ng s·ªë k·ªπ thu·∫≠t Website (Spec):")
        # S·ª≠ d·ª•ng st.json ƒë·ªÉ hi·ªÉn th·ªã spec m·ªôt c√°ch ƒë·∫πp m·∫Øt
        st.json(spec)

        st.subheader("3. M√£ ngu·ªìn ƒë√£ t·∫°o:")

        # Hi·ªÉn th·ªã c√°c tab cho HTML, CSS, JS
        tab1, tab2, tab3 = st.tabs(["HTML", "CSS", "JavaScript"])

        with tab1:
            st.code(html_code, language="html")
        with tab2:
            st.code(css_code, language="css")
        with tab3:
            st.code(js_code, language="javascript")

        st.subheader("4. T·∫£i xu·ªëng Website c·ªßa b·∫°n:")
        st.write("B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng to√†n b·ªô m√£ ngu·ªìn website d∆∞·ªõi d·∫°ng file ZIP.")

        # T·∫°o file ZIP trong b·ªô nh·ªõ
        zip_buffer = BytesIO()
        with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
            zip_file.writestr("index.html", html_code)
            zip_file.writestr("styles.css", css_code)
            zip_file.writestr("script.js", js_code)
            # Th√™m placeholder images n·∫øu c·∫ßn thi·∫øt (t√πy ch·ªçn)
            # Hi·ªán t·∫°i ch∆∞a c√≥ c∆° ch·∫ø qu·∫£n l√Ω ·∫£nh ph·ª©c t·∫°p, n√™n s·∫Ω b·ªè qua vi·ªác th√™m ·∫£nh v√†o ZIP

        zip_buffer.seek(0)
        st.download_button(
            label="T·∫£i xu·ªëng Website (.zip)",
            data=zip_buffer,
            file_name=f"{spec['site_name'].replace(' ', '_').lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
            mime="application/zip",
        )

        st.markdown("---")
        st.info("""
        **B∆∞·ªõc ti·∫øp theo:** Sau khi t·∫£i xu·ªëng, b·∫°n c√≥ th·ªÉ gi·∫£i n√©n file ZIP v√† m·ªü `index.html` trong tr√¨nh duy·ªát ƒë·ªÉ xem website c·ªßa m√¨nh.
        ƒê·ªÉ tri·ªÉn khai website l√™n internet, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c d·ªãch v·ª• nh∆∞ Vercel, Netlify ho·∫∑c GitHub Pages.
        """)
    else:
        st.warning("Vui l√≤ng nh·∫≠p m√¥ t·∫£ trang web c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!")

st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #667eea;">
    <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ni·ªÅm ƒëam m√™ b·ªüi Nh√≥m AI c·ªßa b·∫°n.</p>
</div>
""", unsafe_allow_html=True)
