import os
import subprocess
import json
import logging
import shutil
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed

import pandas as pd
import plotly.express as px
from github import Github, GithubException

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLineEdit, QLabel, QTextEdit, QTableWidget,
    QTableWidgetItem, QHeaderView, QProgressBar, QFormLayout, QMessageBox
)
from PyQt6.QtCore import (
    QThread, QObject, pyqtSignal, Qt, QSettings, QTimer, QUrl
)
from PyQt6.QtGui import QTextCursor, QDesktopServices

# --- C·∫§U H√åNH V√Ä H·∫∞NG S·ªê ---
APP_NAME = "GitHub Python Repo Analyzer"
ORG_NAME = "050903Org"  # T√™n t·ªï ch·ª©c/nh√† ph√°t tri·ªÉn cho QSettings
REPO_DIR = Path("./my_repos_optimized") # Th∆∞ m·ª•c ƒë·ªÉ clone/pull repo

# C·∫•u h√¨nh logging ƒë·ªÉ output th√¥ng tin.
# Log s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn console v√† c≈©ng ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n UI.
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class LogHandler(logging.Handler):
    """
    Custom logging handler ƒë·ªÉ ph√°t c√°c log record nh∆∞ t√≠n hi·ªáu (signal)
    t·ªõi UI ƒë·ªÉ hi·ªÉn th·ªã.
    """
    # message: n·ªôi dung log, level: c·∫•p ƒë·ªô log (INFO, WARNING, ERROR, v.v.)
    log_signal = pyqtSignal(str, int)

    def emit(self, record):
        """Ph√°t sinh t√≠n hi·ªáu v·ªõi n·ªôi dung log v√† c·∫•p ƒë·ªô."""
        msg = self.format(record)
        self.log_signal.emit(msg, record.levelno)

# T·∫°o m·ªôt th·ªÉ hi·ªán (instance) c·ªßa custom log handler
ui_log_handler = LogHandler()
# Th√™m handler n√†y v√†o root logger ƒë·ªÉ n√≥ b·∫Øt t·∫•t c·∫£ c√°c log messages
logging.getLogger().addHandler(ui_log_handler)

class AnalysisWorker(QObject):
    """
    L·ªõp Worker th·ª±c hi·ªán c√°c t√°c v·ª• n·∫∑ng (API call, clone, ph√¢n t√≠ch)
    trong m·ªôt lu·ªìng ri√™ng bi·ªát ƒë·ªÉ gi·ªØ cho UI ph·∫£n h·ªìi.
    """
    # C√°c t√≠n hi·ªáu (signals) ƒë·ªÉ giao ti·∫øp v·ªõi lu·ªìng ch√≠nh (main thread)
    progress_updated = pyqtSignal(int, str)  # current_progress, status_message
    overall_progress_range = pyqtSignal(int, int) # min_value, max_value c·ªßa thanh ti·∫øn tr√¨nh
    analysis_finished = pyqtSignal(pd.DataFrame) # K·∫øt qu·∫£ cu·ªëi c√πng (DataFrame)
    error_occurred = pyqtSignal(str) # Th√¥ng b√°o l·ªói
    status_message = pyqtSignal(str, int) # Th√¥ng b√°o tr·∫°ng th√°i (message, level) cho log viewer tr√™n UI

    def __init__(self, github_token: str, username: str, parent=None):
        """
        Kh·ªüi t·∫°o AnalysisWorker.

        Args:
            github_token (str): GitHub personal access token.
            username (str): GitHub username c·∫ßn ph√¢n t√≠ch.
            parent (QObject, optional): QObject cha. M·∫∑c ƒë·ªãnh l√† None.
        """
        super().__init__(parent)
        self._github_token = github_token
        self._username = username
        self._stop_requested = False # C·ªù ƒë·ªÉ y√™u c·∫ßu d·ª´ng t√°c v·ª•

    def request_stop(self):
        """Y√™u c·∫ßu worker d·ª´ng ho·∫°t ƒë·ªông m·ªôt c√°ch gracefully."""
        self._stop_requested = True
        self._log_and_emit("Analysis stop requested. Finishing current task...", logging.INFO)

    def _log_and_emit(self, message: str, level: int = logging.INFO):
        """Ghi log m·ªôt message v√† ph√°t n√≥ nh∆∞ m·ªôt t√≠n hi·ªáu t·ªõi UI."""
        logging.log(level, message)
        self.status_message.emit(message, level)

    def _check_dependencies(self):
        """Ki·ªÉm tra xem c√°c c√¥ng c·ª• d√≤ng l·ªánh c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a."""
        self._log_and_emit("Checking dependencies (git, cloc, pylint)...")
        dependencies = ["git", "cloc", "pylint"]
        for dep in dependencies:
            if not shutil.which(dep):
                raise RuntimeError(f"L·ªñI: Dependency '{dep}' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng c√†i ƒë·∫∑t v√† th·ª≠ l·∫°i.")
        self._log_and_emit("‚úÖ T·∫•t c·∫£ dependencies ƒë√£ s·∫µn s√†ng.")

    def _get_python_repos(self, github_client: Github) -> list:
        """L·∫•y danh s√°ch c√°c repo Python c√¥ng khai c·ªßa user b·∫±ng c√°ch s·ª≠ d·ª•ng API t√¨m ki·∫øm."""
        try:
            query = f"user:{self._username} language:Python"
            self._log_and_emit(f"ƒêang t√¨m ki·∫øm repo v·ªõi query: '{query}'")
            repos = github_client.search_repositories(query)
            # Chuy·ªÉn iterator th√†nh list ƒë·ªÉ l·∫•y t·ªïng s·ªë l∆∞·ª£ng v√† x·ª≠ l√Ω d·ªÖ h∆°n.
            # L∆∞u √Ω: GitHub API search ch·ªâ tr·∫£ v·ªÅ t·ªëi ƒëa 1000 k·∫øt qu·∫£.
            repo_list = list(repos)
            self._log_and_emit(f"üîç T√¨m th·∫•y {len(repo_list)} repo Python.")
            return repo_list
        except GithubException as e:
            raise RuntimeError(f"L·ªói khi k·∫øt n·ªëi GitHub ho·∫∑c t√¨m repo: {e}")
        except Exception as e:
            raise RuntimeError(f"M·ªôt l·ªói kh√¥ng mong mu·ªën ƒë√£ x·∫£y ra khi l·∫•y repo: {e}")

    def _clone_or_pull_repo(self, repo) -> Path | None:
        """Clone repo n·∫øu ch∆∞a t·ªìn t·∫°i, ho·∫∑c pull ƒë·ªÉ c·∫≠p nh·∫≠t n·∫øu ƒë√£ t·ªìn t·∫°i."""
        dest_path = REPO_DIR / repo.name
        try:
            if self._stop_requested:
                self._log_and_emit(f"B·ªè qua {repo.name} do y√™u c·∫ßu d·ª´ng.", logging.INFO)
                return None
            if dest_path.exists():
                self._log_and_emit(f"‚ôªÔ∏è ƒêang c·∫≠p nh·∫≠t {repo.name}...")
                subprocess.run(
                    ["git", "pull"],
                    cwd=dest_path,
                    check=True,
                    capture_output=True,
                    text=True,
                    timeout=300 # Gi·ªõi h·∫°n th·ªùi gian (5 ph√∫t) cho c√°c t√°c v·ª• m·∫°ng
                )
            else:
                self._log_and_emit(f"üöÄ ƒêang clone {repo.name}...")
                subprocess.run(
                    ["git", "clone", repo.clone_url, str(dest_path)],
                    check=True,
                    capture_output=True,
                    text=True,
                    timeout=600 # Gi·ªõi h·∫°n th·ªùi gian (10 ph√∫t) cho clone ban ƒë·∫ßu
                )
            return dest_path
        except subprocess.CalledProcessError as e:
            self._log_and_emit(f"L·ªói khi clone/pull repo {repo.name}: {e.stderr.strip()}", logging.ERROR)
            return None
        except subprocess.TimeoutExpired:
            self._log_and_emit(f"Timeout khi clone/pull cho {repo.name}", logging.ERROR)
            return None
        except Exception as e:
            self._log_and_emit(f"L·ªói kh√¥ng mong mu·ªën khi clone/pull cho {repo.name}: {e}", logging.ERROR)
            return None

    def _run_cloc_analysis(self, repo_path: Path) -> dict:
        """Ch·∫°y cloc v√† ph√¢n t√≠ch output JSON ƒë·ªÉ tƒÉng ƒë·ªô tin c·∫≠y."""
        try:
            if self._stop_requested:
                return {}
            result = subprocess.run(
                ["cloc", str(repo_path), "--include-lang=Python", "--json", "--quiet"],
                capture_output=True, text=True, check=True, timeout=120 # Gi·ªõi h·∫°n 2 ph√∫t
            )
            cloc_data = json.loads(result.stdout)
            if "Python" in cloc_data:
                py_stats = cloc_data["Python"]
                return {
                    "Blank": py_stats.get("blank", 0),
                    "Comment": py_stats.get("comment", 0),
                    "Code": py_stats.get("code", 0),
                }
            return {"Blank": 0, "Comment": 0, "Code": 0} # Kh√¥ng t√¨m th·∫•y code Python
        except (subprocess.CalledProcessError, json.JSONDecodeError, KeyError) as e:
            self._log_and_emit(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ ph√¢n t√≠ch cloc cho {repo_path.name}: {e}", logging.WARNING)
            return {"Blank": 0, "Comment": 0, "Code": 0}
        except subprocess.TimeoutExpired:
            self._log_and_emit(f"Timeout khi ph√¢n t√≠ch cloc cho {repo_path.name}", logging.ERROR)
            return {"Blank": 0, "Comment": 0, "Code": 0}
        except Exception as e:
            self._log_and_emit(f"L·ªói kh√¥ng mong mu·ªën khi ph√¢n t√≠ch cloc cho {repo_path.name}: {e}", logging.ERROR)
            return {"Blank": 0, "Comment": 0, "Code": 0}

    def _run_pylint_analysis(self, repo_path: Path) -> str:
        """
        Ch·∫°y pylint tr√™n t·∫•t c·∫£ c√°c file .py trong repo ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c.
        S·ª≠ d·ª•ng --exit-zero ƒë·ªÉ ch∆∞∆°ng tr√¨nh kh√¥ng d·ª´ng d√π code c√≥ l·ªói.
        S·ª≠ d·ª•ng --reports=n ƒë·ªÉ ch·ªâ l·∫•y score.
        """
        py_files = [str(f) for f in repo_path.rglob("*.py") if f.is_file()]
        if not py_files:
            return "No Python files"

        try:
            if self._stop_requested:
                return "Stopped"
            result = subprocess.run(
                ["pylint", "--exit-zero", "--score=y", "--reports=n"] + py_files,
                capture_output=True, text=True, timeout=300 # Gi·ªõi h·∫°n 5 ph√∫t
            )
            for line in result.stdout.splitlines():
                if "Your code has been rated at" in line:
                    return line.split(" at ")[1].split(" ")[0]
            # N·∫øu kh√¥ng t√¨m th·∫•y d√≤ng ch·∫•m ƒëi·ªÉm, c√≥ th·ªÉ do kh√¥ng c√≥ code Python ho·∫∑c l·ªói kh√°c.
            if "No files to process" in result.stdout:
                return "No Python files"
            return "Score N/A"
        except subprocess.TimeoutExpired:
            self._log_and_emit(f"Timeout khi ph√¢n t√≠ch pylint cho {repo_path.name}", logging.ERROR)
            return "Timeout"
        except Exception as e:
            self._log_and_emit(f"L·ªói khi ch·∫°y pylint cho {repo_path.name}: {e}", logging.ERROR)
            return "Analysis Error"

    def _analyze_repo(self, repo_path: Path) -> dict:
        """H√†m t·ªïng h·ª£p vi·ªác ph√¢n t√≠ch m·ªôt repo."""
        if self._stop_requested:
            return {}
        self._log_and_emit(f"üß† ƒêang ph√¢n t√≠ch {repo_path.name}...", logging.DEBUG)
        cloc_results = self._run_cloc_analysis(repo_path)
        pylint_score = self._run_pylint_analysis(repo_path)
        return {
            "Repo": repo_path.name,
            "PEP8_Score": pylint_score,
            **cloc_results
        }

    def _generate_report(self, df: pd.DataFrame):
        """T·∫°o file README.md v√† bi·ªÉu ƒë·ªì t·ª´ DataFrame k·∫øt qu·∫£."""
        self._log_and_emit("üìä ƒêang t·∫°o b√°o c√°o...")
        df = df.sort_values(by="Code", ascending=False).reset_index(drop=True)

        try:
            with open("README.md", "w", encoding="utf-8") as f:
                f.write(f"# üìä Python Project Overview for {self._username}\n\n")
                f.write(f"Analyzed a total of **{len(df)}** repositories.\n\n")
                f.write("## üìÑ Analysis Summary Table\n\n")
                f.write(df.to_markdown(index=False)) # S·ª≠ d·ª•ng to_markdown cho ti·ªán l·ª£i

            # V·∫Ω v√† l∆∞u bi·ªÉu ƒë·ªì
            if not df.empty:
                fig = px.bar(
                    df.head(20),  # Ch·ªâ hi·ªÉn th·ªã 20 repo nhi·ªÅu code nh·∫•t cho d·ªÖ nh√¨n
                    x="Repo",
                    y="Code",
                    title=f"üî¢ D√≤ng Code Python trong Top 20 Repo c·ªßa {self._username}",
                    text="Code",
                    color="Code",
                    color_continuous_scale=px.colors.sequential.Viridis
                )
                fig.update_traces(textposition="outside")
                fig.update_layout(xaxis_title="Repo", yaxis_title="S·ªë D√≤ng Code", showlegend=False)
                chart_path = "chart.png"
                fig.write_image(chart_path)
                self._log_and_emit(f"Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i {chart_path}")

                # Th√™m bi·ªÉu ƒë·ªì v√†o README
                with open("README.md", "a", encoding="utf-8") as f:
                    f.write("\n\n## üìà Bi·ªÉu ƒë·ªì d√≤ng code\n\n")
                    f.write("![Bi·ªÉu ƒë·ªì d√≤ng code](chart.png)\n")
            else:
                self._log_and_emit("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì.", logging.WARNING)

            self._log_and_emit("‚úÖ ƒê√£ t·∫°o xong README.md v√† chart.png.")
        except Exception as e:
            self._log_and_emit(f"L·ªói khi t·∫°o b√°o c√°o: {e}", logging.ERROR)

    def run(self):
        """H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng th·ª±c thi c·ªßa worker."""
        try:
            self._check_dependencies()
            REPO_DIR.mkdir(exist_ok=True)

            if not self._github_token:
                raise RuntimeError("GitHub token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng cung c·∫•p.")

            g = Github(self._github_token)
            repos = self._get_python_repos(g)

            if not repos:
                self._log_and_emit("Kh√¥ng t√¨m th·∫•y repo Python n√†o ƒë·ªÉ ph√¢n t√≠ch.", logging.WARNING)
                self.analysis_finished.emit(pd.DataFrame()) # Ph√°t t√≠n hi·ªáu ho√†n th√†nh v·ªõi DataFrame r·ªóng
                return

            # Giai ƒëo·∫°n 1: Clone/Pull Repositories (I/O Bound)
            self._log_and_emit("B·∫Øt ƒë·∫ßu clone/pull repositories...")
            cloned_paths = []
            total_repos = len(repos)
            # Thi·∫øt l·∫≠p ph·∫°m vi t·ªïng th·ªÉ cho thanh ti·∫øn tr√¨nh: clone + analyze
            self.overall_progress_range.emit(0, total_repos * 2)

            with ThreadPoolExecutor(max_workers=8) as executor:
                future_to_repo = {executor.submit(self._clone_or_pull_repo, repo): repo for repo in repos}
                for i, future in enumerate(as_completed(future_to_repo)):
                    if self._stop_requested:
                        raise InterruptedError("Ph√¢n t√≠ch b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
                    path = future.result()
                    if path:
                        cloned_paths.append(path)
                    # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh cho UI (ch·ªâ cho giai ƒëo·∫°n clone)
                    self.progress_updated.emit(i + 1, f"ƒê√£ clone/pull {i + 1}/{total_repos} repo...")

            if not cloned_paths:
                self._log_and_emit("Kh√¥ng c√≥ repository n√†o ƒë∆∞·ª£c clone/pull th√†nh c√¥ng.", logging.WARNING)
                self.analysis_finished.emit(pd.DataFrame())
                return

            # Giai ƒëo·∫°n 2: Ph√¢n t√≠ch Repositories (CPU Bound)
            self._log_and_emit("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch repository (cloc, pylint)...")
            analysis_results = []
            total_cloned = len(cloned_paths)
            # C·∫≠p nh·∫≠t ƒëi·ªÉm b·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh cho giai ƒëo·∫°n ph√¢n t√≠ch
            self.progress_updated.emit(total_repos, "B·∫Øt ƒë·∫ßu ph√¢n t√≠ch...")

            with ProcessPoolExecutor(max_workers=os.cpu_count()) as executor:
                future_to_path = {executor.submit(self._analyze_repo, path): path for path in cloned_paths}
                for i, future in enumerate(as_completed(future_to_path)):
                    if self._stop_requested:
                        raise InterruptedError("Ph√¢n t√≠ch b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
                    result = future.result()
                    if result:
                        analysis_results.append(result)
                    # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh cho UI (t·ªïng ti·∫øn tr√¨nh = clone_done + analyze_progress)
                    self.progress_updated.emit(total_repos + i + 1, f"ƒê√£ ph√¢n t√≠ch {i + 1}/{total_cloned} repo...")

            if not analysis_results:
                self._log_and_emit("Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch n√†o ƒë∆∞·ª£c t·∫°o.", logging.WARNING)
                self.analysis_finished.emit(pd.DataFrame())
                return

            df = pd.DataFrame(analysis_results)
            self._generate_report(df)
            self.analysis_finished.emit(df) # Ph√°t t√≠n hi·ªáu v·ªõi DataFrame cu·ªëi c√πng
            self._log_and_emit("‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t!", logging.INFO)

        except InterruptedError as ie:
            self._log_and_emit(f"Thao t√°c b·ªã gi√°n ƒëo·∫°n: {ie}", logging.INFO)
            self.error_occurred.emit(str(ie)) # Ph√°t t√≠n hi·ªáu l·ªói cho UI
            self.analysis_finished.emit(pd.DataFrame()) # ƒê·∫£m b·∫£o t√≠n hi·ªáu ho√†n th√†nh ƒë∆∞·ª£c ph√°t ngay c·∫£ khi b·ªã gi√°n ƒëo·∫°n
        except RuntimeError as re:
            self._log_and_emit(f"M·ªôt l·ªói nghi√™m tr·ªçng ƒë√£ x·∫£y ra: {re}", logging.ERROR)
            self.error_occurred.emit(str(re))
            self.analysis_finished.emit(pd.DataFrame())
        except Exception as e:
            self._log_and_emit(f"M·ªôt l·ªói kh√¥ng x√°c ƒë·ªãnh ƒë√£ x·∫£y ra: {e}", logging.CRITICAL)
            self.error_occurred.emit(f"M·ªôt l·ªói kh√¥ng mong mu·ªën ƒë√£ x·∫£y ra: {e}")
            self.analysis_finished.emit(pd.DataFrame()) # ƒê·∫£m b·∫£o t√≠n hi·ªáu ho√†n th√†nh ƒë∆∞·ª£c ph√°t ƒë·ªÉ UI reset

class RepoAnalyzerApp(QMainWindow):
    """C·ª≠a s·ªï ·ª©ng d·ª•ng ch√≠nh cho GitHub Python Repo Analyzer."""
    def __init__(self):
        """Kh·ªüi t·∫°o c·ª≠a s·ªï ·ª©ng d·ª•ng ch√≠nh."""
        super().__init__()
        self.setWindowTitle(APP_NAME)
        self.setGeometry(100, 100, 1000, 700) # x, y, width, height

        self._settings = QSettings(ORG_NAME, APP_NAME) # ƒê·ªÉ l∆∞u/t·∫£i c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
        self._worker_thread = None # Lu·ªìng ri√™ng cho worker
        self._worker = None # Worker object

        self._init_ui() # Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng
        self._load_settings() # T·∫£i c√†i ƒë·∫∑t ƒë√£ l∆∞u

        # K·∫øt n·ªëi custom log handler v·ªõi log viewer c·ªßa UI
        ui_log_handler.log_signal.connect(self._update_log_viewer)

    def _init_ui(self):
        """Thi·∫øt l·∫≠p c√°c ph·∫ßn t·ª≠ giao di·ªán ng∆∞·ªùi d√πng v√† b·ªë c·ª•c."""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # 1. Ph·∫ßn c·∫•u h√¨nh
        config_group_layout = QFormLayout()
        self.token_input = QLineEdit()
        self.token_input.setPlaceholderText("Nh·∫≠p GitHub Personal Access Token (PAT)")
        self.token_input.setEchoMode(QLineEdit.EchoMode.Password) # M√£ h√≥a input token
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("Nh·∫≠p GitHub Username (v√≠ d·ª•: 050903)")

        config_group_layout.addRow("GitHub Token:", self.token_input)
        config_group_layout.addRow("GitHub Username:", self.username_input)
        main_layout.addLayout(config_group_layout)

        # 2. C√°c n√∫t ƒëi·ªÅu khi·ªÉn
        button_layout = QHBoxLayout()
        self.start_button = QPushButton("B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch")
        self.start_button.clicked.connect(self._start_analysis)
        self.stop_button = QPushButton("D·ª´ng Ph√¢n t√≠ch")
        self.stop_button.clicked.connect(self._stop_analysis)
        self.stop_button.setEnabled(False) # Ban ƒë·∫ßu v√¥ hi·ªáu h√≥a
        self.view_report_button = QPushButton("Xem B√°o c√°o")
        self.view_report_button.clicked.connect(self._view_report)
        self.view_report_button.setEnabled(False) # Ban ƒë·∫ßu v√¥ hi·ªáu h√≥a

        button_layout.addWidget(self.start_button)
        button_layout.addWidget(self.stop_button)
        button_layout.addWidget(self.view_report_button)
        main_layout.addLayout(button_layout)

        # 3. Thanh ti·∫øn tr√¨nh
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.setTextVisible(True)
        self.progress_status_label = QLabel("S·∫µn s√†ng b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
        main_layout.addWidget(self.progress_status_label)
        main_layout.addWidget(self.progress_bar)

        # 4. Log Viewer
        main_layout.addWidget(QLabel("Nh·∫≠t k√Ω ho·∫°t ƒë·ªông:"))
        self.log_viewer = QTextEdit()
        self.log_viewer.setReadOnly(True)
        self.log_viewer.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap) # Kh√¥ng t·ª± ƒë·ªông xu·ªëng d√≤ng
        main_layout.addWidget(self.log_viewer)

        # 5. B·∫£ng k·∫øt qu·∫£
        main_layout.addWidget(QLabel("K·∫øt qu·∫£ ph√¢n t√≠ch:"))
        self.results_table = QTableWidget()
        # ƒê·∫∑t s·ªë c·ªôt v√† ti√™u ƒë·ªÅ cho b·∫£ng
        self.results_table.setColumnCount(5)
        self.results_table.setHorizontalHeaderLabels(["Repository", "PEP8 Score", "Blank Lines", "Comment Lines", "Code Lines"])
        self.results_table.horizontalHeader().setStretchLastSection(True)
        # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt ƒë·ªÉ l·∫•p ƒë·∫ßy kh√¥ng gian
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.results_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers) # L√†m cho b·∫£ng ch·ªâ ƒë·ªçc
        main_layout.addWidget(self.results_table)

    def _load_settings(self):
        """T·∫£i c√†i ƒë·∫∑t ng∆∞·ªùi d√πng (token, username) t·ª´ QSettings."""
        token = self._settings.value("github_token", "", type=str)
        username = self._settings.value("github_username", "", type=str)

        if token:
            self.token_input.setText(token)
        else:
            # ∆Øu ti√™n bi·∫øn m√¥i tr∆∞·ªùng n·∫øu token ch∆∞a ƒë∆∞·ª£c l∆∞u
            env_token = os.getenv("GITHUB_TOKEN")
            if env_token:
                self.token_input.setText(env_token)
                logging.info("ƒê√£ t·∫£i GitHub Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng.")

        self.username_input.setText(username)

    def _save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t ng∆∞·ªùi d√πng v√†o QSettings."""
        self._settings.setValue("github_token", self.token_input.text())
        self._settings.setValue("github_username", self.username_input.text())

    def _update_log_viewer(self, message: str, level: int):
        """Th√™m c√°c th√¥ng b√°o log v√†o log viewer c·ªßa UI v·ªõi m√†u s·∫Øc."""
        color = "black"
        if level >= logging.ERROR:
            color = "red"
        elif level >= logging.WARNING:
            color = "darkorange"
        elif level >= logging.INFO:
            color = "darkblue"
        elif level == logging.DEBUG:
            color = "gray"

        # √Åp d·ª•ng HTML styling cho vƒÉn b·∫£n c√≥ m√†u
        formatted_message = f"<span style='color:{color};'>{message}</span>"
        self.log_viewer.append(formatted_message)
        # Cu·ªôn xu·ªëng cu·ªëi
        self.log_viewer.verticalScrollBar().setValue(self.log_viewer.verticalScrollBar().maximum())

    def _start_analysis(self):
        """Kh·ªüi ƒë·ªông qu√° tr√¨nh ph√¢n t√≠ch trong m·ªôt lu·ªìng ri√™ng bi·ªát."""
        token = self.token_input.text().strip()
        username = self.username_input.text().strip()

        if not token:
            QMessageBox.warning(self, "L·ªói Input", "Vui l√≤ng cung c·∫•p GitHub Personal Access Token.")
            return
        if not username:
            QMessageBox.warning(self, "L·ªói Input", "Vui l√≤ng cung c·∫•p GitHub username.")
            return

        self._save_settings() # L∆∞u c√°c input hi·ªán t·∫°i

        self._reset_ui_for_new_analysis() # ƒê·∫∑t l·∫°i UI cho ph√¢n t√≠ch m·ªõi

        # T·∫°o lu·ªìng v√† worker
        self._worker_thread = QThread()
        self._worker = AnalysisWorker(token, username)
        self._worker.moveToThread(self._worker_thread) # Chuy·ªÉn worker ƒë·∫øn lu·ªìng m·ªõi

        # K·∫øt n·ªëi c√°c t√≠n hi·ªáu (signals) v√† khe (slots)
        self._worker.progress_updated.connect(self._update_progress_bar)
        self._worker.overall_progress_range.connect(self._set_progress_bar_range)
        self._worker.analysis_finished.connect(self._handle_analysis_finished)
        self._worker.error_occurred.connect(self._handle_error)
        self._worker.status_message.connect(self._update_log_viewer)

        # B·∫Øt ƒë·∫ßu ph∆∞∆°ng th·ª©c run c·ªßa worker khi lu·ªìng b·∫Øt ƒë·∫ßu
        self._worker_thread.started.connect(self._worker.run)
        self._worker_thread.start() # Kh·ªüi ƒë·ªông lu·ªìng

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.view_report_button.setEnabled(False)
        self.token_input.setEnabled(False)
        self.username_input.setEnabled(False)
        self.progress_status_label.setText("ƒêang ti·∫øn h√†nh ph√¢n t√≠ch...")

    def _stop_analysis(self):
        """G·ª≠i y√™u c·∫ßu d·ª´ng t·ªõi lu·ªìng worker."""
        if self._worker:
            self._worker.request_stop()
        self.stop_button.setEnabled(False) # V√¥ hi·ªáu h√≥a n√∫t d·ª´ng ngay l·∫≠p t·ª©c
        self.progress_status_label.setText("ƒêang d·ª´ng ph√¢n t√≠ch...")

    def _reset_ui_for_new_analysis(self):
        """ƒê·∫∑t l·∫°i c√°c ph·∫ßn t·ª≠ UI tr∆∞·ªõc khi m·ªôt ph√¢n t√≠ch m·ªõi b·∫Øt ƒë·∫ßu."""
        self.log_viewer.clear()
        self.results_table.setRowCount(0)
        self.progress_bar.setValue(0)
        self.progress_bar.setMaximum(0) # ƒê·∫∑t l·∫°i ph·∫°m vi thanh ti·∫øn tr√¨nh
        self.progress_status_label.setText("ƒêang kh·ªüi t·∫°o...")
        self.view_report_button.setEnabled(False)

    def _update_progress_bar(self, value: int, status_text: str):
        """C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh v√† nh√£n tr·∫°ng th√°i."""
        self.progress_bar.setValue(value)
        self.progress_status_label.setText(status_text)

    def _set_progress_bar_range(self, min_val: int, max_val: int):
        """ƒê·∫∑t ph·∫°m vi cho thanh ti·∫øn tr√¨nh."""
        self.progress_bar.setRange(min_val, max_val)

    def _handle_analysis_finished(self, df: pd.DataFrame):
        """X·ª≠ l√Ω khi ph√¢n t√≠ch ho√†n t·∫•t, hi·ªÉn th·ªã k·∫øt qu·∫£."""
        if self._worker_thread and self._worker_thread.isRunning():
            self._worker_thread.quit() # Y√™u c·∫ßu lu·ªìng tho√°t
            self._worker_thread.wait() # ƒê·ª£i lu·ªìng k·∫øt th√∫c s·∫°ch s·∫Ω

        self._populate_results_table(df) # ƒêi·ªÅn d·ªØ li·ªáu v√†o b·∫£ng k·∫øt qu·∫£
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.token_input.setEnabled(True)
        self.username_input.setEnabled(True)

        if not df.empty:
            self.view_report_button.setEnabled(True)
            self.progress_status_label.setText("Ph√¢n t√≠ch ho√†n t·∫•t. B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o.")
            self._log_and_emit("Ph√¢n t√≠ch ƒë√£ ho√†n th√†nh v√† b√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.", logging.INFO)
        else:
            self.progress_status_label.setText("Ph√¢n t√≠ch ƒë√£ ho√†n t·∫•t nh∆∞ng kh√¥ng c√≥ k·∫øt qu·∫£.")
            self._log_and_emit("Ph√¢n t√≠ch ƒë√£ ho√†n t·∫•t, nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫°o. Ki·ªÉm tra nh·∫≠t k√Ω ƒë·ªÉ bi·∫øt c·∫£nh b√°o/l·ªói.", logging.WARNING)

        self.progress_bar.setValue(self.progress_bar.maximum()) # ƒê·ªï ƒë·∫ßy thanh ti·∫øn tr√¨nh khi ho√†n t·∫•t

    def _handle_error(self, message: str):
        """Hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong QMessageBox v√† ghi log."""
        QMessageBox.critical(self, "L·ªói Ph√¢n t√≠ch", message)
        logging.critical(f"L·ªói UI: {message}")
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.token_input.setEnabled(True)
        self.username_input.setEnabled(True)
        self.progress_status_label.setText("Ph√¢n t√≠ch th·∫•t b·∫°i.")
        self.progress_bar.setValue(0) # ƒê·∫∑t l·∫°i thanh ti·∫øn tr√¨nh khi c√≥ l·ªói

    def _populate_results_table(self, df: pd.DataFrame):
        """ƒêi·ªÅn d·ªØ li·ªáu t·ª´ DataFrame v√†o QTableWidget."""
        self.results_table.setRowCount(0) # X√≥a c√°c h√†ng hi·ªán c√≥
        if df.empty:
            logging.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch ƒë·ªÉ hi·ªÉn th·ªã.")
            return

        # ƒê·∫∑t l·∫°i s·ªë c·ªôt v√† ti√™u ƒë·ªÅ ƒë·ªÉ kh·ªõp v·ªõi DataFrame (ƒë·ªÅ ph√≤ng thay ƒë·ªïi)
        headers = ["Repo", "PEP8_Score", "Blank", "Comment", "Code"]
        self.results_table.setColumnCount(len(headers))
        self.results_table.setHorizontalHeaderLabels(["Repository", "PEP8 Score", "Blank Lines", "Comment Lines", "Code Lines"])

        self.results_table.setRowCount(len(df))
        for row_idx, (index, row_data) in enumerate(df.iterrows()):
            self.results_table.setItem(row_idx, 0, QTableWidgetItem(str(row_data["Repo"])))
            self.results_table.setItem(row_idx, 1, QTableWidgetItem(str(row_data["PEP8_Score"])))
            self.results_table.setItem(row_idx, 2, QTableWidgetItem(str(row_data["Blank"])))
            self.results_table.setItem(row_idx, 3, QTableWidgetItem(str(row_data["Comment"])))
            self.results_table.setItem(row_idx, 4, QTableWidgetItem(str(row_data["Code"])))

        self.results_table.resizeColumnsToContents() # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt theo n·ªôi dung
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch) # ƒê·∫£m b·∫£o c√°c c·ªôt l·∫•p ƒë·∫ßy kh√¥ng gian

    def _view_report(self):
        """M·ªü file README.md v√† chart.png b·∫±ng ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng."""
        readme_path = Path("README.md").resolve()
        chart_path = Path("chart.png").resolve()

        if readme_path.exists():
            QDesktopServices.openUrl(QUrl.fromLocalFile(str(readme_path)))
            logging.info(f"ƒê√£ m·ªü {readme_path}")
        else:
            logging.error("README.md kh√¥ng t√¨m th·∫•y.")
            QMessageBox.warning(self, "Kh√¥ng t√¨m th·∫•y B√°o c√°o", "README.md kh√¥ng t√¨m th·∫•y. Vui l√≤ng ch·∫°y ph√¢n t√≠ch tr∆∞·ªõc.")

        # M·ªü bi·ªÉu ƒë·ªì sau m·ªôt kho·∫£ng tr·ªÖ ng·∫Øn ƒë·ªÉ h·ªá th·ªëng c√≥ th·ªùi gian x·ª≠ l√Ω vi·ªác m·ªü file ƒë·∫ßu ti√™n
        QTimer.singleShot(500, lambda: self._open_chart(chart_path))

    def _open_chart(self, chart_path: Path):
        """H√†m tr·ª£ gi√∫p ƒë·ªÉ m·ªü bi·ªÉu ƒë·ªì."""
        if chart_path.exists():
            QDesktopServices.openUrl(QUrl.fromLocalFile(str(chart_path)))
            logging.info(f"ƒê√£ m·ªü {chart_path}")
        else:
            logging.error("chart.png kh√¥ng t√¨m th·∫•y.")
            QMessageBox.warning(self, "Kh√¥ng t√¨m th·∫•y B√°o c√°o", "chart.png kh√¥ng t√¨m th·∫•y. Vui l√≤ng ch·∫°y ph√¢n t√≠ch tr∆∞·ªõc.")

    def closeEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï, d·ª´ng lu·ªìng worker n·∫øu ƒëang ch·∫°y."""
        if self._worker_thread and self._worker_thread.isRunning():
            reply = QMessageBox.question(self, 'X√°c nh·∫≠n tho√°t',
                                         "Ph√¢n t√≠ch v·∫´n ƒëang ch·∫°y. B·∫°n c√≥ mu·ªën d·ª´ng n√≥ v√† tho√°t kh√¥ng?",
                                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                         QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.Yes:
                self._worker.request_stop()
                self._worker_thread.quit()
                # ƒê·ª£i t·ªëi ƒëa 5 gi√¢y ƒë·ªÉ lu·ªìng k·∫øt th√∫c s·∫°ch s·∫Ω
                self._worker_thread.wait(5000)
                if self._worker_thread.isRunning():
                    # N·∫øu lu·ªìng v·∫´n ƒëang ch·∫°y sau khi ƒë·ª£i, bu·ªôc d·ª´ng
                    self._worker_thread.terminate()
                    logging.warning("Lu·ªìng worker b·ªã bu·ªôc d·ª´ng.")
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()

if __name__ == "__main__":
    import sys

    # T·∫°o th∆∞ m·ª•c l∆∞u repo n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
    REPO_DIR.mkdir(parents=True, exist_ok=True)

    app = QApplication(sys.argv)
    window = RepoAnalyzerApp()
    window.show()
    sys.exit(app.exec())